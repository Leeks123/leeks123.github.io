{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/cpp-stl-map","result":{"data":{"post":{"__typename":"MdxPost","slug":"/cpp-stl-map","title":"CPP STL - Map","date":"07.08.2020","tags":[{"name":"CPP","slug":"cpp"}],"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"CPP STL - Map\",\n  \"date\": \"2020-08-07T00:00:00.000Z\",\n  \"tags\": [\"CPP\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"key\\uC640 value\\uC758 \\uC30D\\uC73C\\uB85C \\uC774\\uB904\\uC9C4 \\uD2B8\\uB9AC\"), mdx(\"p\", null, \"key\\uB294 \\uC911\\uBCF5\\uC744 \\uD5C8\\uC6A9\\uD558\\uC9C0 \\uC54A\\uACE0, value\\uB294 \\uC911\\uBCF5\\uC744 \\uD5C8\\uC6A9\\uD568\"), mdx(\"p\", null, \"key\\uC758 \\uC911\\uBCF5\\uC740 MultiMap\\uC744 \\uC0AC\\uC6A9\\uD574\\uC57C\\uD568\"), mdx(\"p\", null, \"\\uAC80\\uC0C9, \\uC0BD\\uC785, \\uC0AD\\uC81C \\uB4F1\\uC758 \\uC18D\\uB3C4\\uAC00 O(logN)\\uC73C\\uB85C \\uBE60\\uB984\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"#include <iostream>\\n#include <map>\\nusing namespace std;\\nint main(){\\n    //int \\uC790\\uB8CC\\uD615\\uC744 key\\uB85C int \\uC790\\uB8CC\\uD615\\uC744 \\uB370\\uC774\\uD130\\uB85C \\uC800\\uC7A5\\uD558\\uB294 \\uB515\\uC154\\uB108\\uB9AC \\uC790\\uB8CC\\uAD6C\\uC870 \\uC0DD\\uC131\\n    map<int, int> m;\\n    //(4, 5)\\uC6D0\\uC18C \\uC0BD\\uC785\\n    m.insert(make_pair(4, 5));\\n    //\\uB610\\uB294\\n    m[5]=6;\\n    //key\\uC640 \\uC5F0\\uAD00\\uB41C \\uC6D0\\uC18C\\uB97C pair<\\uD0A4 \\uC790\\uB8CC\\uD615, \\uB370\\uC774\\uD130 \\uC790\\uB8CC\\uD615> \\uD615\\uD0DC\\uB85C \\uB9AC\\uD134\\uD568\\n    printf(\\\"%d\\\\n\\\", m.find(4)->second);\\n    //key\\uC640 \\uC5F0\\uAD00\\uB41C \\uC6D0\\uC18C\\uC758 \\uAC1C\\uC218\\uB97C \\uB9AC\\uD134\\uD568\\n    printf(\\\"%d\\\\n\\\", m.count(4));\\n    //\\uC800\\uC7A5\\uB41C \\uC6D0\\uC18C\\uC758 \\uC218\\uB97C \\uB9AC\\uD134\\uD568\\n    printf(\\\"%d\\\\n\\\", m.size());\\n    //\\uD574\\uB2F9 \\uC8FC\\uC18C\\uC758 \\uC6D0\\uC18C \\uC0AD\\uC81C, key\\uAC12\\uC744 \\uB123\\uC5B4\\uB3C4 \\uAC00\\uB2A5\\n    // m.erase(4);\\n    m.erase(++m.begin());\\n    //\\uBAA8\\uB4E0 \\uC6D0\\uC18C \\uC0AD\\uC81C\\n    m.clear();\\n    return 0;\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"key와 value의 쌍으로 이뤄진 트리 key는 중복을 허용하지 않고, value는 중복을 허용함 key의 중복은 MultiMap을 사용해야함 검색, 삽입, 삭제 등의 속도가 O(logN)으로 빠름","timeToRead":1,"banner":null}},"pageContext":{"slug":"/cpp-stl-map","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["318001574","3787687951","3787687951"]}