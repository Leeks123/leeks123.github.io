{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/cpp-stl-queue","result":{"data":{"post":{"__typename":"MdxPost","slug":"/cpp-stl-queue","title":"CPP STL - Queue","date":"04.08.2020","tags":[{"name":"CPP","slug":"cpp"}],"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"CPP STL - Queue\",\n  \"date\": \"2020-08-04T00:00:00.000Z\",\n  \"tags\": [\"CPP\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h5\", null, \"\\uD050\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"#include <iostream>\\n#include <queue>\\nusing namespace std;\\nint main(){\\n    queue<int> q;//int\\uC790\\uB8CC\\uD615\\uC744 \\uC800\\uC7A5\\uD558\\uB294 \\uD050 \\uC0DD\\uC131\\n    \\n  q.push(4); // \\uB9E8 \\uB4A4\\uC5D0 \\uC694\\uC18C \\uC0BD\\uC785\\n  q.pop(); // \\uB9E8 \\uC55E\\uC758 \\uC694\\uC18C\\uB97C \\uBC18\\uD658\\n    \\n  q.front();//\\uD050\\uC758 \\uB9E8 \\uC55E\\uC5D0 \\uC788\\uB294 \\uC694\\uC18C\\uC5D0 \\uB300\\uD55C \\uCC38\\uC870\\uB97C \\uBC18\\uD658\\n  q.back();//\\uD050\\uC758 \\uB9E8 \\uB4A4\\uC5D0 \\uC788\\uB294 \\uC694\\uC18C\\uC5D0 \\uB300\\uD55C \\uCC38\\uC870\\uB97C \\uBC18\\uD658\\n  \\n  q.empty(); //\\uD050\\uAC00 \\uBE44\\uC5B4\\uC788\\uC73C\\uBA74 true, \\uBE44\\uC5B4\\uC788\\uC9C0 \\uC54A\\uC73C\\uBA74 false \\uBC18\\uD658\\n    \\n  q.size(); //\\uD050\\uC5D0 \\uC800\\uC7A5\\uB418\\uC5B4 \\uC788\\uB294 \\uC6D0\\uC18C\\uC758 \\uAC1C\\uC218\\n  \\n    return 0;\\n}\\n\")), mdx(\"p\", null, \"dque \\uD074\\uB798\\uC2A4 \\uAE30\\uBC18\"), mdx(\"h5\", null, \"\\uC6B0\\uC120\\uC21C\\uC704 \\uD050\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"#include <queue>\\nusing namespace std;\\nint main(){\\n  \\n  priority_queue<int> pq; //\\uB0B4\\uB9BC\\uCC28\\uC21C\\uC73C\\uB85C \\uC800\\uC7A5\\n  \\n  // <\\uBCC0\\uC218\\uBA85, \\uCEE8\\uD14C\\uC774\\uB108, \\uBE44\\uAD50\\uD568\\uC218>\\n  priority_queue<int, vector<int>, less<int> > pque;\\n  \\n  pq.push(10);\\n  pq.pop();\\n  \\n  pq.top();\\n  \\n  pq.size();\\n  \\n  pq.empty();\\n  \\n  return 0;\\n}\\n\")), mdx(\"p\", null, \" vector \\uD074\\uB798\\uC2A4 \\uAE30\\uBC18\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"큐 dque 클래스 기반 우선순위 큐  vector 클래스 기반","timeToRead":1,"banner":null}},"pageContext":{"slug":"/cpp-stl-queue","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["318001574","3787687951","3787687951"]}