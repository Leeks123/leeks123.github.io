{"data":{"post":{"__typename":"MdxPost","slug":"/cpp-stl-set","title":"CPP STL - Set","date":"07.08.2020","tags":[{"name":"CPP","slug":"cpp"}],"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"CPP STL - Set\",\n  \"date\": \"2020-08-07T00:00:00.000Z\",\n  \"tags\": [\"CPP\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\uC218\\uD559\\uC5D0\\uC11C\\uC758 \\uC9D1\\uD559\\uACFC \\uAC19\\uC740 \\uAC1C\\uB150\\n\\uC911\\uBCF5\\uC774 \\uC5C6\\uB294 \\uD56D\\uBAA9\\uB4E4\\uC774 \\uBAA8\\uC778 \\uAC83\\n(\\uC911\\uBCF5 \\uD5C8\\uC6A9\\uD558\\uB824\\uBA74 MultiSet)\"), mdx(\"p\", null, \"\\uC21C\\uC11C\\uAC00 \\uD544\\uC694 \\uC5C6\\uACE0, \\uACE0\\uC720 \\uAC12\\uC744 \\uC6D0\\uD558\\uB294 \\uACBD\\uC6B0 \\uCD5C\\uC120\\uC758 \\uC790\\uB8CC\\uAD6C\\uC870\\n\\uB370\\uC774\\uD130\\uB97C \\uBE44\\uC21C\\uCC28\\uC801\\uC73C\\uB85C \\uC800\\uC7A5\\uD560 \\uC218 \\uC788\\uB294 \\uC790\\uB8CC\\uAD6C\\uC870\"), mdx(\"p\", null, \"\\uC911\\uBCF5\\uB41C \\uAC12\\uC744 \\uACE8\\uB77C\\uB0B4\\uC57C \\uD560 \\uB54C, \\uBE60\\uB978 Look Up\\uC744 \\uD574\\uC57C \\uD560 \\uB54C, \\uC21C\\uC11C\\uB294 \\uC0C1\\uAD00\\uC5C6\\uC744 \\uB54C \\uC0AC\\uC6A9\"), mdx(\"p\", null, \"\\uADE0\\uD615\\uC7A1\\uD78C \\uC774\\uC9C4\\uD2B8\\uB9AC. \\uB178\\uB4DC\\uAE30\\uBC18 \\uCEE8\\uD14C\\uC774\\uB108\\n\\uC6D0\\uC18C \\uC0BD\\uC785\\uACFC \\uC0AD\\uC81C, \\uD0D0\\uC0C9 \\uB4F1\\uC758 \\uC5F0\\uC0B0\\uC740 O(logn)\\uC744 \\uBCF4\\uC7A5\\n\\uC0BD\\uC785 \\uC2DC \\uC790\\uB3D9\\uC73C\\uB85C \\uC815\\uB82C. \\uB514\\uD3F4\\uD2B8 \\uC815\\uB82C\\uC740 \\uC624\\uB984\\uCC28\\uC21C\"), mdx(\"p\", null, \"\\uC5F0\\uAD00 \\uCEE8\\uD14C\\uC774\\uB108 \\uC911 \\uD558\\uB098. key\\uB97C \\uBC14\\uD0D5\\uC73C\\uB85C \\uB300\\uC751\\uD558\\uB294 \\uAC12\\uC744 \\uC5BB\\uC744 \\uC218 \\uC788\\uB294 \\uAD6C\\uC870\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"#include <iostream>\\n#include <set>\\nusing namespace std;\\nint main(){\\n    //int \\uC790\\uB8CC\\uD615\\uC744 \\uC800\\uC7A5\\uD558\\uB294 \\uADE0\\uD615\\uC7A1\\uD78C \\uC774\\uC9C4\\uD2B8\\uB9AC \\uC0DD\\uC131\\n    set<int> s;\\n    \\n    //\\uC6D0\\uC18C \\uC0BD\\uC785\\n    s.insert(5);\\n    s.insert(4);\\n    \\n    // 2\\uBC88\\uC9F8 \\uC6D0\\uC18C \\uC0AD\\uC81C\\n    s.erase(++s.begin());\\n    \\n    //6\\uAC12\\uC744 \\uAC00\\uC9C0\\uB294 \\uC6D0\\uC18C\\uB97C \\uCC3E\\uC74C \\uC788\\uB2E4\\uBA74 \\uD574\\uB2F9 \\uC6D0\\uC18C\\uC758 \\uC8FC\\uC18C\\uAC12,  \\uC5C6\\uB2E4\\uBA74 s.end()\\uB9AC\\uD134\\n    if(s.find(6)!=s.end())\\n        printf(\\\"\\uC874\\uC7AC\\uD569\\uB2C8\\uB2E4.\\\\n\\\");\\n    else\\n        printf(\\\"\\uC5C6\\uC2B5\\uB2C8\\uB2E4.\\\\n\\\");\\n    \\n    //\\uC800\\uC7A5\\uB41C \\uC6D0\\uC18C\\uC758 \\uC218\\uB97C \\uB9AC\\uD134\\n    printf(\\\"%d\\\\n\\\", s.size());\\n    \\n    // \\uC6D0\\uC18C\\uAC12\\uC5D0 \\uD574\\uB2F9\\uD558\\uB294 \\uAC1C\\uC218\\uB97C \\uBC18\\uD658\\n    printf(\\\"%d\\\\n\\\", s.count(4)); // \\uC788\\uC73C\\uBA74 1, \\uC5C6\\uC73C\\uBA74 0\\n    \\n    //\\uBAA8\\uB4E0 \\uC6D0\\uC18C \\uC0AD\\uC81C\\n    s.clear();\\n\\n    return 0;\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"수학에서의 집학과 같은 개념\n중복이 없는 항목들이 모인 것\n(중복 허용하려면 MultiSet) 순서가 필요 없고, 고유 값을 원하는 경우 최선의 자료구조\n데이터를 비순차적으로 저장할 수 있는 자료구조 중복된 값을 골라내야 할 때, 빠른 Look Up…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/cpp-stl-set","formatString":"DD.MM.YYYY"}}