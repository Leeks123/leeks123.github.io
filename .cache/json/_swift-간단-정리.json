{"data":{"post":{"__typename":"MdxPost","slug":"/swift-간단-정리","title":"Swift 간단 정리","date":"17.08.2020","tags":[{"name":"Swift","slug":"swift"}],"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Swift 간단 정리\",\n  \"date\": \"2020-08-17T00:00:00.000Z\",\n  \"tags\": [\"Swift\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"\\uC0C1\\uC218\\uC640 \\uBCC0\\uC218\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC0C1\\uC218\\uC120\\uC5B8 \\uD0A4\\uC6CC\\uB4DC \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"let\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC0C1\\uC218\\uC120\\uC5B8 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"let \\uC774\\uB984: \\uD0C0\\uC785 = \\uAC12\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBCC0\\uC218\\uC120\\uC5B8 \\uD0A4\\uC6CC\\uB4DC \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"var\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBCC0\\uC218 \\uC120\\uC5B8 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"var \\uC774\\uB984: \\uD0C0\\uC785 = \\uAC12\"))))), mdx(\"h3\", null, \"\\uAE30\\uBCF8 \\uB370\\uC774\\uD130 \\uD0C0\\uC785\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Bool : true, false. 0,1\\uB85C \\uB300\\uCCB4\\uD560 \\uC218\\uB294 \\uC5C6\\uB2E4\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Int : \\uC815\\uC218\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Uint : \\uC591\\uC758 \\uC815\\uC218\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Float : 32\\uBE44\\uD2B8, \\uBD80\\uB3D9\\uC18C\\uC218\\uD615\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Double : 64\\uBE44\\uD2B8, \\uBD80\\uB3D9\\uC18C\\uC218\\uD615\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Character : \\uBB38\\uC790. \\uC720\\uB2C8\\uCF54\\uB4DC. \\uD070\\uB530\\uC634\\uD45C\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"String : \\uBB38\\uC790\\uC5F4. \\uD070\\uB530\\uC634\\uD45C. \")), mdx(\"p\", null, \"\\uB2E4\\uB978 \\uB370\\uC774\\uD130 \\uD0C0\\uC785\\uACFC \\uC790\\uB8CC\\uAD50\\uD658\\uC740 \\uC554\\uC2DC\\uC801\\uC73C\\uB85C \\uBD88\\uAC00\\uB2A5\"), mdx(\"h3\", null, \"Any, AnyObject, nil\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any : \\uC2A4\\uC704\\uD504\\uD2B8\\uC758 \\uBAA8\\uB4E0 \\uD0C0\\uC785\\uC744 \\uC9C0\\uCE6D\\uD558\\uB294 \\uD0A4\\uC6CC\\uB4DC\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"AnyObject : \\uBAA8\\uB4E0 \\uD074\\uB798\\uC2A4 \\uD0C0\\uC785\\uC744 \\uC9C0\\uCE6D\\uD558\\uB294 \\uD504\\uB85C\\uD1A0\\uCF5C\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"nil : \\uC5C6\\uC74C\\uC744 \\uC758\\uBBF8\\uD558\\uB294 \\uD0A4\\uC6CC\\uB4DC. Any, AnyObject\\uC5D0 \\uD560\\uB2F9\\uBD88\\uAC00\")), mdx(\"h3\", null, \"\\uCEEC\\uB809\\uC158 \\uD0C0\\uC785\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Array : \\uC21C\\uC11C\\uAC00 \\uC788\\uB294 \\uB9AC\\uC2A4\\uD2B8 \\uCEEC\\uB809\\uC158\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"var integers: Array<Int> = Array<Int>()\\nintegers.append(1)\\nintegers.append(2) // [1,2]\\n\\nintegers.contains(3) // false\\n\\nintegers.count // 2\\n\\nintegers.remove(at: 0)  // 1\\nintegers.removeLast()       // 2\\nintegers.removeAll()        // []\\n\\nvar doubles: Array<Double> = [Double]()\\nvar strings: [String] = [String]()\\nvar characters: [Character] = []\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dictionary : \\uD0A4\\uC640 \\uAC12\\uC758 \\uC30D\\uC73C\\uB85C \\uC774\\uB904\\uC9C4 \\uCEEC\\uB809\\uC158\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"var anyDictionary: Dictionary<String, Any> = [String: Any]()\\nanyDictionary[\\\"someKey\\\"] = \\\"value\\\"\\nanyDictionary[\\\"anotherKey\\\"] = 100\\n\\nanyDictionary.removeValue(forKey:\\\"anotherKey\\\") // 100\\nanyDictionary[\\\"someKey\\\"] = nil\\nanyDictionary // [:]\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Set : \\uC21C\\uC11C\\uAC00 \\uC5C6\\uACE0, \\uBA64\\uBC84\\uAC00 \\uC720\\uC77C\\uD55C \\uCEEC\\uB809\\uC158\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"var integerSet: Set<Int> = Set<Int>()\\nintegerSet.insert(1)\\nintegerSet.insert(1)\\nintegerSet.insert(1)\\nintegerSet.insert(2)\\nintegerSet.insert(3)\\nintegerSet  // {1,2,3}\\n\\nintegerSet.contain(1) // true\\n\\nintegerSet.count            // 3\\n\\nintegerSet.remove(100)\\nintegerSet.removeFirst()\\n\\n\\n\")), mdx(\"h3\", null, \"\\uD568\\uC218\"), mdx(\"h4\", null, \"\\uD568\\uC218 \\uC120\\uC5B8\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"func sum(a: Int, b: Int) -> Int {\\n  return a+b\\n}\\n\\nfunc printName(name: String) -> Void {\\n  print(name)\\n}\\n\\nsum(a: 3,b:5) // 8\\n\")), mdx(\"h4\", null, \"\\uAE30\\uBCF8\\uAC12\\uC744 \\uAC00\\uC9C0\\uB294 \\uD568\\uC218\"), mdx(\"p\", null, \"\\uAE30\\uBCF8\\uAC12\\uC744 \\uAC00\\uC9C0\\uB294 \\uB9E4\\uAC1C\\uBCC0\\uC218\\uB294 \\uB9C8\\uC9C0\\uB9C9\\uC5D0 \\uB46C\\uC57C\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"func greeting(friend: String, me: String=\\\"Tom\\\"){\\n  print(\\\"hello \\\\(friend)! I'm \\\\(me)\\\")\\n}\\n\")), mdx(\"h4\", null, \"\\uC804\\uB2EC\\uC778\\uC790\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB9E4\\uAC1C\\uBCC0\\uC218\\uC758 \\uC5ED\\uD560\\uC744 \\uC880 \\uB354 \\uBA85\\uD655\\uD558\\uAC8C \\uD558\\uAC70\\uB098\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC0AC\\uC6A9\\uC790 \\uC785\\uC7A5\\uC5D0\\uC11C \\uD45C\\uD604\\uD558\\uACE0\\uC790 \\uD560 \\uB54C \\uC0AC\\uC6A9\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC624\\uBC84\\uB85C\\uB529 \\uC5ED\\uD560 \\uAC00\\uB2A5\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"func greeting(to friend: String, from me: String=\\\"Tom\\\"){\\n  print(\\\"hello \\\\(friend)! I'm \\\\(me)\\\")\\n}\\n\")), mdx(\"h4\", null, \"\\uAC00\\uBCC0\\uB9E4\\uAC1C\\uBCC0\\uC218\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"func sayHelloToFriends(me: String, friends: String...) -> String {\\n  return \\\"Hello \\\\(friends)! I'm \\\\(me)\\\"\\n}\\n\\nprint(sayHelloToFriends(me: \\\"Tom\\\", friends: \\\"Jack\\\", \\\"eric\\\", \\\"wing\\\"))\\n\")), mdx(\"p\", null, \"\\uC2A4\\uC704\\uD504\\uD2B8\\uB294 \\uD568\\uC218\\uD615 \\uD328\\uB7EC\\uB2E4\\uC784\\uC744 \\uD3EC\\uD568\\uD558\\uB294 \\uB2E4\\uC911 \\uD328\\uB7EC\\uB2E4\\uC784 \\uC5B8\\uC5B4\"), mdx(\"p\", null, \"\\uC2A4\\uC704\\uD504\\uD2B8\\uC758 \\uD568\\uC218\\uB294 \\uC77C\\uAE09\\uAC1D\\uCCB4\\uC774\\uBBC0\\uB85C \\uBCC0\\uC218, \\uC0C1\\uC218 \\uB4F1\\uC5D0 \\uC800\\uC7A5\\uC774 \\uAC00\\uB2A5\\uD558\\uACE0 \\uB9E4\\uAC1C\\uBCC0\\uC218\\uB85C \\uC804\\uB2EC\\uB3C4 \\uAC00\\uB2A5\"), mdx(\"h3\", null, \"\\uC870\\uAC74\\uBB38\"), mdx(\"h4\", null, \"if else\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC18C\\uAD04\\uD638\\uB294 \\uC0DD\\uB7B5\\uAC00\\uB2A5\\uD558\\uC9C0\\uB9CC \\uC911\\uAD04\\uD638\\uB294 \\uC0DD\\uB7B5 \\uBD88\\uAC00\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC870\\uAC74\\uBB38\\uC740 \\uD56D\\uC0C1 Bool \\uD0C0\\uC785\\uC774 \\uC640\\uC57C \\uD568\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"if condition {\\n  ...\\n} else {\\n  ...\\n}\\n\")), mdx(\"h4\", null, \"switch\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Default\\uB294 \\uBC18\\uB4DC\\uC2DC \\uC791\\uC131\\uD560 \\uAC83\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"break\"), \" \\uBB38\\uC744 \\uC0AC\\uC6A9\\uD558\\uC9C0 \\uC54A\\uC74C. \\uAD73\\uC774 \\uC0AC\\uC6A9\\uD558\\uACA0\\uB2E4\\uBA74 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"fallthrough\"))), mdx(\"h3\", null, \"\\uBC18\\uBCF5\\uBB38\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"var integers = [1,2,3]\\nlet dictionary = [\\\"a\\\":1,\\\"b\\\":2,\\\"c\\\":3]\\n\")), mdx(\"h4\", null, \"for ... in\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"for integer in integers {\\n  print(integer)\\n}\\n\\nfor (char,num) in dictionary {\\n  print(\\\"\\\\(char): \\\\(num)\\\")\\n}\\n\")), mdx(\"h4\", null, \"while\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"while integers.count > 1 {\\n  integers.removeLast()\\n}\\n\")), mdx(\"h4\", null, \"repeat-while\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"repeat {\\n  integers.removeLast()\\n} while integers.count > 0\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"do while\\uACFC \\uAC19\\uC740 \\uD615\\uD0DC\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"do\"), \" \\uB294 \\uC2A4\\uC704\\uD504\\uD2B8\\uC5D0\\uC11C\\uC758 \\uC624\\uB958\\uCC98\\uB9AC \\uD0A4\\uC6CC\\uB4DC\")), mdx(\"h3\", null, \"\\uC635\\uC154\\uB110\"), mdx(\"p\", null, \"\\uAC12\\uC774 \\uC788\\uC744 \\uC218\\uB3C4 \\uC788\\uACE0 \\uC5C6\\uC744 \\uC218\\uB3C4 \\uC788\\uB294 \\uAC83.\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nil\"), \" \\uAC00\\uB2A5\\uC131\\uC744 \\uBB38\\uC11C\\uD654 \\uD558\\uC9C0 \\uC54A\\uC544\\uB3C4 \\uCF54\\uB4DC\\uB9CC\\uC73C\\uB85C \\uCDA9\\uBD84\\uD788 \\uD45C\\uD604\\uAC00\\uB2A5. \\uC635\\uC154\\uB110\\uC774 \\uC544\\uB2C8\\uB77C\\uBA74 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nil\"), \" \\uCCB4\\uD06C\\uB97C \\uC548 \\uD574\\uB3C4 \\uC548\\uC2EC\"), mdx(\"p\", null, \"\\uC635\\uC154\\uB110\\uC740 \\uC5F4\\uAC70\\uD615 + \\uC81C\\uB108\\uB7F4\\uC758 \\uD615\\uD0DC\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"enum Optional<Wrapped> : ExpressibleByNilLiteral {\\n  case none\\n  case some(Wrapped)\\n}\\n\\nlet optionalValue: Optional<Int> = nil\\nlet optionalValue: Int? = nil\\n\")), mdx(\"h5\", null, \"!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"var optionaleVaue: Int! = 100\\n\\nswitch optionalValue { \\n  case .none:\\n    print(\\\"This Optional variable is nill\\\")\\n  case .some(let value):\\n    print(\\\"Value is \\\\(value)\\\")\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Inmplicitly Unwrapped Optional (\\uC554\\uC2DC\\uC801 \\uCD94\\uCD9C \\uC635\\uC154\\uB110) \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAE30\\uC874 \\uBCC0\\uC218\\uCC98\\uB7FC \\uC0AC\\uC6A9 \\uAC00\\uB2A5\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"nil\"), \" \\uD560\\uB2F9 \\uAC00\\uB2A5\")), mdx(\"h5\", null, \"?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"nil\"), \" \\uD560\\uB2F9 \\uAC00\\uB2A5\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAE30\\uC874 \\uBCC0\\uC218\\uCC98\\uB7FC \\uC0AC\\uC6A9 \\uBD88\\uAC00 - \\uC635\\uC154\\uB110\\uACFC \\uC77C\\uBC18 \\uAC12\\uC740 \\uB2E4\\uB978 \\uD0C0\\uC785\\uC774\\uBBC0\\uB85C \\uC5F0\\uC0B0 \\uBD88\\uAC00\")), mdx(\"h4\", null, \"Optional Unwrapping\"), mdx(\"h5\", null, \"Optional Binding\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"func printName(name: String) {\\n  print(name)\\n}\\nvar myName: String! = nil\\n\\nif let name: String = myName {\\n  printName(name)\\n} else {\\n  print(\\\"myName == nil\\\")\\n}\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"if-let\"), \" \\uC744 \\uC774\\uC6A9\\uD558\\uC5EC \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" \\uC5D0 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"myName\"), \" \\uC744 \\uBC14\\uC778\\uB529\\uD558\\uC5EC \\uC0AC\\uC6A9\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" \\uC740 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"if-let\"), \" \\uAD6C\\uBB38 \\uB0B4\\uC5D0\\uC11C\\uB9CC \\uC0AC\\uC6A9 \\uAC00\\uB2A5\"), mdx(\"h5\", null, \"Force Unwrapping\"), mdx(\"p\", null, \"\\uC635\\uC154\\uB110\\uC758 \\uAC12\\uC744 \\uAC15\\uC81C\\uB85C \\uCD94\\uCD9C. \\uBE44\\uCD94 \\uBC29\\uC2DD\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"var myName2: String? = \\\"optional\\\"\\nprintName(myName2!) // !\\uB97C \\uBD99\\uC5B4 \\uAC15\\uC81C \\uCD94\\uCD9C\\n\\nmyName2 = nil\\nprint(myName!)\\n// \\uAC15\\uC81C\\uCD94\\uCD9C \\uC2DC \\uAC12\\uC774 \\uC5C6\\uC73C\\uBBC0\\uB85C \\uB7F0\\uD0C0\\uC784 \\uC624\\uB958 \\uBC1C\\uC0DD\\n\\nvar yourName: String! = nil\\nprintName(yourName)\\n// \\uC554\\uC2DC\\uC801 \\uCD94\\uCD9C \\uC635\\uC154\\uB110\\uC744 \\uBD99\\uC774\\uBA74 \\uC54C\\uC544\\uC11C \\uBCC0\\uC218\\uB4A4\\uC5D0 !\\uB97C \\uBD99\\uC784\\n// nil\\uAC12\\uC774 \\uC804\\uB2EC\\uB418\\uAE30 \\uB584\\uBB38\\uC5D0 \\uB7F0\\uD0C0\\uC784 \\uC624\\uB958 \\uBC1C\\uC0DD\\n\")), mdx(\"h3\", null, \"\\uAD6C\\uC870\\uCCB4\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"struct Sample {\\n  var mutableProperty: Int = 100 // \\uAC00\\uBCC0 \\uD504\\uB85C\\uD37C\\uD2F0\\n  let immutableProperty: Int = 100 // \\uBD88\\uBCC0 \\uD504\\uB85C\\uD37C\\uD2F0\\n  \\n  static var typeProperty: Int = 100 // \\uD0C0\\uC785 \\uD504\\uB85C\\uD37C\\uD2F0\\n  \\n  // \\uC778\\uC2A4\\uD134\\uC2A4 \\uBA54\\uC11C\\uB4DC\\n  func instanceMethod() {\\n    print(\\\"instance method\\\")\\n  }\\n  // \\uD0C0\\uC785 \\uBA54\\uC11C\\uB4DC\\n  static func typeMethod() {\\n    print(\\\"type method\\\")\\n  }\\n}\\n\\n// \\uAC00\\uBCC0 \\uC778\\uC2A4\\uD134\\uC2A4, \\uAC00\\uBCC0\\uD504\\uB85C\\uD37C\\uD2F0\\uB9CC \\uBCC0\\uACBD \\uAC00\\uB2A5\\nvar mutable: Sample = Sample()\\n\\n// \\uBD88\\uBCC0 \\uC778\\uC2A4\\uD134\\uC2A4, \\uC5B4\\uB5A4 \\uD504\\uB85C\\uD37C\\uD2F0\\uB3C4 \\uBCC0\\uACBD \\uBD88\\uAC00\\nlet immutable: Sample = Sample()\\n\\nSample.typeMethod() // type method\\n\")), mdx(\"h3\", null, \"\\uD074\\uB798\\uC2A4\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD6C\\uC870\\uCCB4\\uC640 \\uAD49\\uC7A5\\uD788 \\uC720\\uC0AC\\uD558\\uC9C0\\uB9CC \\uAD6C\\uC870\\uCCB4\\uB294 \\uAC12 \\uD0C0\\uC785\\uC774\\uACE0, \\uD074\\uB798\\uC2A4\\uB294 \\uCC38\\uC870 \\uD0C0\\uC785\\uC774\\uB2E4\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB2E4\\uC911 \\uC0C1\\uC18D\\uC774 \\uB418\\uC9C0 \\uC54A\\uC74C\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"class Sample {\\n  var mutableProperty: Int = 100 // \\uAC00\\uBCC0 \\uD504\\uB85C\\uD37C\\uD2F0\\n  let immutableProperty: Int = 100 // \\uBD88\\uBCC0 \\uD504\\uB85C\\uD37C\\uD2F0\\n  \\n  static var typeProperty: Int = 100 // \\uD0C0\\uC785 \\uD504\\uB85C\\uD37C\\uD2F0\\n  \\n  // \\uC778\\uC2A4\\uD134\\uC2A4 \\uBA54\\uC11C\\uB4DC\\n  func instanceMethod() {\\n    print(\\\"instance method\\\")\\n  }\\n  // \\uD0C0\\uC785 \\uBA54\\uC11C\\uB4DC\\n  // \\uC7AC\\uC815\\uC758 \\uBD88\\uAC00 \\uD0C0\\uC785 \\uBA54\\uC11C\\uB4DC - static\\n  static func typeMethod() {\\n    print(\\\"type method -static\\\")\\n  }\\n  // \\uC7AC\\uC815\\uC758 \\uAC00\\uB2A5 \\uD0C0\\uC785 \\uBA54\\uC11C\\uB4DC - class\\n  class func classMethod() {\\n    print(\\\"type method -class\\\")\\n  }\\n}\\n\")), mdx(\"p\", null, \"\\uBD88\\uBCC0 \\uC778\\uC2A4\\uD134\\uC2A4\\uB85C \\uC0DD\\uC131\\uC744 \\uD574\\uB3C4 \\uAC00\\uBCC0\\uD504\\uB85C\\uD37C\\uD2F0 \\uBCC0\\uACBD \\uAC00\\uB2A5\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"상수와 변수 상수선언 키워드  let 상수선언  let 이름: 타입 = 값 변수선언 키워드  var 변수 선언  var 이름: 타입 = 값 기본 데이터 타입 Bool : true, false. 0,1로 대체할 수는 없다 Int : 정수 Uint…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/swift-간단-정리","formatString":"DD.MM.YYYY"}}