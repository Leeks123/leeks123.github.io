{"expireTime":9007200852998738000,"key":"gatsby-plugin-mdx-entire-payload-7f96a4f8dfc5b05a0c8930dd186d8db3-","val":{"mdast":{"type":"root","children":[{"type":"code","lang":"cpp","meta":null,"value":"#include <iostream>\n#include <stack>\nusing namespace std;\nint main(){\n\t\n  stack<int> st;\n\t\n  //원소(4) 삽입\n\tst.push(4);\n\t\n  //맨 위 원소 팝. top이 가리키는 원소를 삭제. 반환x\n\tst.pop(); \n\t\n  //맨 위 원소 값 반환\n\tint n = st.pop();\n\t\n  //스택이 비어있다면 1 아니면 0\n\tprintf(\"%d\\n\", st.empty());\n\t\n  //스택에 저장되어 있는 원소의 수 출력\n\tprintf(\"%d\\n\", st.size());\n\t\n  return 0;\n}","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":27,"column":4,"offset":339},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"데크컨테이너 - 내부 구조가 리스트 (스택이 이 경우)","position":{"start":{"line":31,"column":3,"offset":345},"end":{"line":31,"column":33,"offset":375},"indent":[]}}],"position":{"start":{"line":31,"column":3,"offset":345},"end":{"line":31,"column":33,"offset":375},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":343},"end":{"line":32,"column":1,"offset":376},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"벡터컨테이너 - 내부구조가 동적배열","position":{"start":{"line":33,"column":3,"offset":379},"end":{"line":33,"column":22,"offset":398},"indent":[]}}],"position":{"start":{"line":33,"column":3,"offset":379},"end":{"line":33,"column":22,"offset":398},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":377},"end":{"line":34,"column":1,"offset":399},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"평균적으로 데크가 벡터보다 더 빠르게 동작","position":{"start":{"line":35,"column":3,"offset":402},"end":{"line":35,"column":26,"offset":425},"indent":[]}}],"position":{"start":{"line":35,"column":3,"offset":402},"end":{"line":35,"column":26,"offset":425},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":400},"end":{"line":37,"column":3,"offset":429},"indent":[1,1]}}],"position":{"start":{"line":31,"column":1,"offset":343},"end":{"line":37,"column":3,"offset":429},"indent":[1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"CPP STL - Stack\",\"date\":\"2020-08-04T00:00:00.000Z\",\"tags\":[\"CPP\"]}","position":{"start":{"line":39,"column":1,"offset":431},"end":{"line":39,"column":105,"offset":535},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":39,"column":105,"offset":535}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"CPP STL - Stack\",\n  \"date\": \"2020-08-04T00:00:00.000Z\",\n  \"tags\": [\"CPP\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"#include <iostream>\\n#include <stack>\\nusing namespace std;\\nint main(){\\n    \\n  stack<int> st;\\n    \\n  //\\uC6D0\\uC18C(4) \\uC0BD\\uC785\\n    st.push(4);\\n    \\n  //\\uB9E8 \\uC704 \\uC6D0\\uC18C \\uD31D. top\\uC774 \\uAC00\\uB9AC\\uD0A4\\uB294 \\uC6D0\\uC18C\\uB97C \\uC0AD\\uC81C. \\uBC18\\uD658x\\n    st.pop(); \\n    \\n  //\\uB9E8 \\uC704 \\uC6D0\\uC18C \\uAC12 \\uBC18\\uD658\\n    int n = st.pop();\\n    \\n  //\\uC2A4\\uD0DD\\uC774 \\uBE44\\uC5B4\\uC788\\uB2E4\\uBA74 1 \\uC544\\uB2C8\\uBA74 0\\n    printf(\\\"%d\\\\n\\\", st.empty());\\n    \\n  //\\uC2A4\\uD0DD\\uC5D0 \\uC800\\uC7A5\\uB418\\uC5B4 \\uC788\\uB294 \\uC6D0\\uC18C\\uC758 \\uC218 \\uCD9C\\uB825\\n    printf(\\\"%d\\\\n\\\", st.size());\\n    \\n  return 0;\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uB370\\uD06C\\uCEE8\\uD14C\\uC774\\uB108 - \\uB0B4\\uBD80 \\uAD6C\\uC870\\uAC00 \\uB9AC\\uC2A4\\uD2B8 (\\uC2A4\\uD0DD\\uC774 \\uC774 \\uACBD\\uC6B0)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uBCA1\\uD130\\uCEE8\\uD14C\\uC774\\uB108 - \\uB0B4\\uBD80\\uAD6C\\uC870\\uAC00 \\uB3D9\\uC801\\uBC30\\uC5F4\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uD3C9\\uADE0\\uC801\\uC73C\\uB85C \\uB370\\uD06C\\uAC00 \\uBCA1\\uD130\\uBCF4\\uB2E4 \\uB354 \\uBE60\\uB974\\uAC8C \\uB3D9\\uC791\"))));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"CPP STL - Stack\",\n  \"date\": \"2020-08-04T00:00:00.000Z\",\n  \"tags\": [\"CPP\"]\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`#include <iostream>\n#include <stack>\nusing namespace std;\nint main(){\n    \n  stack<int> st;\n    \n  //원소(4) 삽입\n    st.push(4);\n    \n  //맨 위 원소 팝. top이 가리키는 원소를 삭제. 반환x\n    st.pop(); \n    \n  //맨 위 원소 값 반환\n    int n = st.pop();\n    \n  //스택이 비어있다면 1 아니면 0\n    printf(\"%d\\\\n\", st.empty());\n    \n  //스택에 저장되어 있는 원소의 수 출력\n    printf(\"%d\\\\n\", st.size());\n    \n  return 0;\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`데크컨테이너 - 내부 구조가 리스트 (스택이 이 경우)`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`벡터컨테이너 - 내부구조가 동적배열`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`평균적으로 데크가 벡터보다 더 빠르게 동작`}</p>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}