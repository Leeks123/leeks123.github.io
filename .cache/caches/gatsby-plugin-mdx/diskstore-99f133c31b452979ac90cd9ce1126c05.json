{"expireTime":9007200852998738000,"key":"gatsby-plugin-mdx-entire-payload-bb39ae28be0368018d26a2c49c824e8f-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":3,"children":[{"type":"text","value":"const로 변하지 않는 값을 표현하라","position":{"start":{"line":2,"column":5,"offset":5},"end":{"line":2,"column":26,"offset":26},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":26,"offset":26},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"const는 블록의 문맥 내에서 재할당할 수 없는 선언","position":{"start":{"line":4,"column":1,"offset":28},"end":{"line":4,"column":31,"offset":58},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":28},"end":{"line":4,"column":31,"offset":58},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"const에 배열, 객체, 컬렉션 형태를 할당하는 경우에는 바뀔 수 있음. 그러니 까다롭게 봐야하고 되도록이면 조작을 피하는 것이 최선","position":{"start":{"line":6,"column":1,"offset":60},"end":{"line":6,"column":76,"offset":135},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":60},"end":{"line":6,"column":76,"offset":135},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"일단은 const를 기본으로 사용. 코드가 변경되어 더 이상 적절하지 않을 때 다른 선언으로 변경해서 사용할 것","position":{"start":{"line":10,"column":1,"offset":139},"end":{"line":10,"column":63,"offset":201},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":139},"end":{"line":10,"column":63,"offset":201},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":12,"column":1,"offset":203},"end":{"line":12,"column":4,"offset":206},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"let과 const로 유효범위 충돌을 줄여라","position":{"start":{"line":14,"column":5,"offset":212},"end":{"line":14,"column":29,"offset":236},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":208},"end":{"line":14,"column":29,"offset":236},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"let은 재할당이 가능한 점에서 var와 유사","position":{"start":{"line":16,"column":1,"offset":238},"end":{"line":16,"column":26,"offset":263},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":238},"end":{"line":16,"column":26,"offset":263},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"var는 어휘적 유효범위(lexical scope), let은 블록 유효범위(block scope), const도 블록 유효범위","position":{"start":{"line":18,"column":1,"offset":265},"end":{"line":18,"column":72,"offset":336},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":265},"end":{"line":18,"column":72,"offset":336},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"let과 const는 같은 이름의 변수를 다시 선언할 수 없다.","position":{"start":{"line":20,"column":1,"offset":338},"end":{"line":20,"column":36,"offset":373},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":338},"end":{"line":20,"column":36,"offset":373},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":22,"column":1,"offset":375},"end":{"line":22,"column":4,"offset":378},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"블록 유효 범위 변수로 정보를 격리하라","position":{"start":{"line":24,"column":5,"offset":384},"end":{"line":24,"column":26,"offset":405},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":380},"end":{"line":24,"column":26,"offset":405},"indent":[]}},{"type":"blockquote","children":[{"type":"heading","depth":5,"children":[{"type":"text","value":"호이스팅","position":{"start":{"line":26,"column":9,"offset":415},"end":{"line":26,"column":13,"offset":419},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":409},"end":{"line":26,"column":13,"offset":419},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"자바스크립트에서는 함수나 변수를 작성하기 전에도 사용이 가능하다.\n이는 자바스크립트에서 컨텍스트 실행이 작동하는 방식 때문.","position":{"start":{"line":28,"column":3,"offset":424},"end":{"line":29,"column":35,"offset":495},"indent":[3]}}],"position":{"start":{"line":28,"column":3,"offset":424},"end":{"line":29,"column":35,"offset":495},"indent":[3]}},{"type":"paragraph","children":[{"type":"text","value":"변수는 선언하기 전에 초기화하여 사용될 수 있음. 그러나 초기화 없이는 사용 불가\n초기화가 아니 선언만 끌어올림. 만약 변수를 선언한 뒤 나중에 초기화 시켜 사용한다면, 그 값은 undefined","position":{"start":{"line":31,"column":3,"offset":500},"end":{"line":32,"column":66,"offset":611},"indent":[3]}}],"position":{"start":{"line":31,"column":3,"offset":500},"end":{"line":32,"column":66,"offset":611},"indent":[3]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://developer.mozilla.org/ko/docs/Glossary/Hoisting","children":[{"type":"text","value":"Hoisting","position":{"start":{"line":34,"column":4,"offset":617},"end":{"line":34,"column":12,"offset":625},"indent":[]}}],"position":{"start":{"line":34,"column":3,"offset":616},"end":{"line":34,"column":70,"offset":683},"indent":[]}}],"position":{"start":{"line":34,"column":3,"offset":616},"end":{"line":34,"column":70,"offset":683},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":407},"end":{"line":34,"column":70,"offset":683},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"for나 if문에 사용하는 변수는 var보다는 let을 사용할 것. let을 이용하면 for문이 반복될 때마다 값을 잠금","position":{"start":{"line":36,"column":1,"offset":685},"end":{"line":36,"column":68,"offset":752},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":685},"end":{"line":36,"column":68,"offset":752},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":38,"column":1,"offset":754},"end":{"line":38,"column":4,"offset":757},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"템플릿 리터럴로 변수를 읽을 수 있는 문자열로 변환하라","position":{"start":{"line":40,"column":5,"offset":763},"end":{"line":40,"column":35,"offset":793},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":759},"end":{"line":40,"column":35,"offset":793},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"템플릿 리터럴은 백틱( ` )을 사용한다","position":{"start":{"line":42,"column":1,"offset":795},"end":{"line":42,"column":23,"offset":817},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":795},"end":{"line":42,"column":23,"offset":817},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"변수에 할당한 문자열처럼 단순 문자열이 아니라면 특별한 지정자( ","position":{"start":{"line":44,"column":1,"offset":819},"end":{"line":44,"column":37,"offset":855},"indent":[]}},{"type":"inlineCode","value":"${ 변수 }","position":{"start":{"line":44,"column":37,"offset":855},"end":{"line":44,"column":46,"offset":864},"indent":[]}},{"type":"text","value":" )로 감싸야 한다","position":{"start":{"line":44,"column":46,"offset":864},"end":{"line":44,"column":56,"offset":874},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":819},"end":{"line":44,"column":56,"offset":874},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"let name = 'john';\n\nlet str0 = \"Hi, \"+name;\nlet str1 = `Hi, ${name}`;\nlet str2 = `Hi, ${name.toUpperCase()}`;","position":{"start":{"line":46,"column":1,"offset":876},"end":{"line":52,"column":4,"offset":1003},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"변수 뿐만 아니라 메서드 호출도 가능하다. 그러나 가능하면 중괄호 내부에서 많은 것을 하지 않는 것이 좋다.","position":{"start":{"line":54,"column":1,"offset":1005},"end":{"line":54,"column":61,"offset":1065},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1005},"end":{"line":54,"column":61,"offset":1065},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"예전 방법이 나은 경우는 추가정보가 없는 두 변수를 연결하는 경우 뿐이다.","position":{"start":{"line":56,"column":1,"offset":1067},"end":{"line":56,"column":42,"offset":1108},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1067},"end":{"line":56,"column":42,"offset":1108},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"<자바스크립트 코딩의 기술> ch1\",\"date\":\"2020-08-02T00:00:00.000Z\",\"tags\":[\"JS\"]}","position":{"start":{"line":58,"column":1,"offset":1110},"end":{"line":58,"column":108,"offset":1217},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":58,"column":108,"offset":1217}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"<자바스크립트 코딩의 기술> ch1\",\n  \"date\": \"2020-08-02T00:00:00.000Z\",\n  \"tags\": [\"JS\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"const\\uB85C \\uBCC0\\uD558\\uC9C0 \\uC54A\\uB294 \\uAC12\\uC744 \\uD45C\\uD604\\uD558\\uB77C\"), mdx(\"p\", null, \"const\\uB294 \\uBE14\\uB85D\\uC758 \\uBB38\\uB9E5 \\uB0B4\\uC5D0\\uC11C \\uC7AC\\uD560\\uB2F9\\uD560 \\uC218 \\uC5C6\\uB294 \\uC120\\uC5B8\"), mdx(\"p\", null, \"const\\uC5D0 \\uBC30\\uC5F4, \\uAC1D\\uCCB4, \\uCEEC\\uB809\\uC158 \\uD615\\uD0DC\\uB97C \\uD560\\uB2F9\\uD558\\uB294 \\uACBD\\uC6B0\\uC5D0\\uB294 \\uBC14\\uB014 \\uC218 \\uC788\\uC74C. \\uADF8\\uB7EC\\uB2C8 \\uAE4C\\uB2E4\\uB86D\\uAC8C \\uBD10\\uC57C\\uD558\\uACE0 \\uB418\\uB3C4\\uB85D\\uC774\\uBA74 \\uC870\\uC791\\uC744 \\uD53C\\uD558\\uB294 \\uAC83\\uC774 \\uCD5C\\uC120\"), mdx(\"p\", null, \"\\uC77C\\uB2E8\\uC740 const\\uB97C \\uAE30\\uBCF8\\uC73C\\uB85C \\uC0AC\\uC6A9. \\uCF54\\uB4DC\\uAC00 \\uBCC0\\uACBD\\uB418\\uC5B4 \\uB354 \\uC774\\uC0C1 \\uC801\\uC808\\uD558\\uC9C0 \\uC54A\\uC744 \\uB54C \\uB2E4\\uB978 \\uC120\\uC5B8\\uC73C\\uB85C \\uBCC0\\uACBD\\uD574\\uC11C \\uC0AC\\uC6A9\\uD560 \\uAC83\"), mdx(\"hr\", null), mdx(\"h3\", null, \"let\\uACFC const\\uB85C \\uC720\\uD6A8\\uBC94\\uC704 \\uCDA9\\uB3CC\\uC744 \\uC904\\uC5EC\\uB77C\"), mdx(\"p\", null, \"let\\uC740 \\uC7AC\\uD560\\uB2F9\\uC774 \\uAC00\\uB2A5\\uD55C \\uC810\\uC5D0\\uC11C var\\uC640 \\uC720\\uC0AC\"), mdx(\"p\", null, \"var\\uB294 \\uC5B4\\uD718\\uC801 \\uC720\\uD6A8\\uBC94\\uC704(lexical scope), let\\uC740 \\uBE14\\uB85D \\uC720\\uD6A8\\uBC94\\uC704(block scope), const\\uB3C4 \\uBE14\\uB85D \\uC720\\uD6A8\\uBC94\\uC704\"), mdx(\"p\", null, \"let\\uACFC const\\uB294 \\uAC19\\uC740 \\uC774\\uB984\\uC758 \\uBCC0\\uC218\\uB97C \\uB2E4\\uC2DC \\uC120\\uC5B8\\uD560 \\uC218 \\uC5C6\\uB2E4.\"), mdx(\"hr\", null), mdx(\"h3\", null, \"\\uBE14\\uB85D \\uC720\\uD6A8 \\uBC94\\uC704 \\uBCC0\\uC218\\uB85C \\uC815\\uBCF4\\uB97C \\uACA9\\uB9AC\\uD558\\uB77C\"), mdx(\"blockquote\", null, mdx(\"h5\", {\n    parentName: \"blockquote\"\n  }, \"\\uD638\\uC774\\uC2A4\\uD305\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uC790\\uBC14\\uC2A4\\uD06C\\uB9BD\\uD2B8\\uC5D0\\uC11C\\uB294 \\uD568\\uC218\\uB098 \\uBCC0\\uC218\\uB97C \\uC791\\uC131\\uD558\\uAE30 \\uC804\\uC5D0\\uB3C4 \\uC0AC\\uC6A9\\uC774 \\uAC00\\uB2A5\\uD558\\uB2E4.\\n\\uC774\\uB294 \\uC790\\uBC14\\uC2A4\\uD06C\\uB9BD\\uD2B8\\uC5D0\\uC11C \\uCEE8\\uD14D\\uC2A4\\uD2B8 \\uC2E4\\uD589\\uC774 \\uC791\\uB3D9\\uD558\\uB294 \\uBC29\\uC2DD \\uB54C\\uBB38.\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uBCC0\\uC218\\uB294 \\uC120\\uC5B8\\uD558\\uAE30 \\uC804\\uC5D0 \\uCD08\\uAE30\\uD654\\uD558\\uC5EC \\uC0AC\\uC6A9\\uB420 \\uC218 \\uC788\\uC74C. \\uADF8\\uB7EC\\uB098 \\uCD08\\uAE30\\uD654 \\uC5C6\\uC774\\uB294 \\uC0AC\\uC6A9 \\uBD88\\uAC00\\n\\uCD08\\uAE30\\uD654\\uAC00 \\uC544\\uB2C8 \\uC120\\uC5B8\\uB9CC \\uB04C\\uC5B4\\uC62C\\uB9BC. \\uB9CC\\uC57D \\uBCC0\\uC218\\uB97C \\uC120\\uC5B8\\uD55C \\uB4A4 \\uB098\\uC911\\uC5D0 \\uCD08\\uAE30\\uD654 \\uC2DC\\uCF1C \\uC0AC\\uC6A9\\uD55C\\uB2E4\\uBA74, \\uADF8 \\uAC12\\uC740 undefined\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/ko/docs/Glossary/Hoisting\"\n  }), \"Hoisting\"))), mdx(\"p\", null, \"for\\uB098 if\\uBB38\\uC5D0 \\uC0AC\\uC6A9\\uD558\\uB294 \\uBCC0\\uC218\\uB294 var\\uBCF4\\uB2E4\\uB294 let\\uC744 \\uC0AC\\uC6A9\\uD560 \\uAC83. let\\uC744 \\uC774\\uC6A9\\uD558\\uBA74 for\\uBB38\\uC774 \\uBC18\\uBCF5\\uB420 \\uB54C\\uB9C8\\uB2E4 \\uAC12\\uC744 \\uC7A0\\uAE08\"), mdx(\"hr\", null), mdx(\"h3\", null, \"\\uD15C\\uD50C\\uB9BF \\uB9AC\\uD130\\uB7F4\\uB85C \\uBCC0\\uC218\\uB97C \\uC77D\\uC744 \\uC218 \\uC788\\uB294 \\uBB38\\uC790\\uC5F4\\uB85C \\uBCC0\\uD658\\uD558\\uB77C\"), mdx(\"p\", null, \"\\uD15C\\uD50C\\uB9BF \\uB9AC\\uD130\\uB7F4\\uC740 \\uBC31\\uD2F1( ` )\\uC744 \\uC0AC\\uC6A9\\uD55C\\uB2E4\"), mdx(\"p\", null, \"\\uBCC0\\uC218\\uC5D0 \\uD560\\uB2F9\\uD55C \\uBB38\\uC790\\uC5F4\\uCC98\\uB7FC \\uB2E8\\uC21C \\uBB38\\uC790\\uC5F4\\uC774 \\uC544\\uB2C8\\uB77C\\uBA74 \\uD2B9\\uBCC4\\uD55C \\uC9C0\\uC815\\uC790( \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"${ \\uBCC0\\uC218 }\"), \" )\\uB85C \\uAC10\\uC2F8\\uC57C \\uD55C\\uB2E4\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"let name = 'john';\\n\\nlet str0 = \\\"Hi, \\\"+name;\\nlet str1 = `Hi, ${name}`;\\nlet str2 = `Hi, ${name.toUpperCase()}`;\\n\")), mdx(\"p\", null, \"\\uBCC0\\uC218 \\uBFD0\\uB9CC \\uC544\\uB2C8\\uB77C \\uBA54\\uC11C\\uB4DC \\uD638\\uCD9C\\uB3C4 \\uAC00\\uB2A5\\uD558\\uB2E4. \\uADF8\\uB7EC\\uB098 \\uAC00\\uB2A5\\uD558\\uBA74 \\uC911\\uAD04\\uD638 \\uB0B4\\uBD80\\uC5D0\\uC11C \\uB9CE\\uC740 \\uAC83\\uC744 \\uD558\\uC9C0 \\uC54A\\uB294 \\uAC83\\uC774 \\uC88B\\uB2E4.\"), mdx(\"p\", null, \"\\uC608\\uC804 \\uBC29\\uBC95\\uC774 \\uB098\\uC740 \\uACBD\\uC6B0\\uB294 \\uCD94\\uAC00\\uC815\\uBCF4\\uAC00 \\uC5C6\\uB294 \\uB450 \\uBCC0\\uC218\\uB97C \\uC5F0\\uACB0\\uD558\\uB294 \\uACBD\\uC6B0 \\uBFD0\\uC774\\uB2E4.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"<자바스크립트 코딩의 기술> ch1\",\n  \"date\": \"2020-08-02T00:00:00.000Z\",\n  \"tags\": [\"JS\"]\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h3>{`const로 변하지 않는 값을 표현하라`}</h3>\n    <p>{`const는 블록의 문맥 내에서 재할당할 수 없는 선언`}</p>\n    <p>{`const에 배열, 객체, 컬렉션 형태를 할당하는 경우에는 바뀔 수 있음. 그러니 까다롭게 봐야하고 되도록이면 조작을 피하는 것이 최선`}</p>\n    <p>{`일단은 const를 기본으로 사용. 코드가 변경되어 더 이상 적절하지 않을 때 다른 선언으로 변경해서 사용할 것`}</p>\n    <hr></hr>\n    <h3>{`let과 const로 유효범위 충돌을 줄여라`}</h3>\n    <p>{`let은 재할당이 가능한 점에서 var와 유사`}</p>\n    <p>{`var는 어휘적 유효범위(lexical scope), let은 블록 유효범위(block scope), const도 블록 유효범위`}</p>\n    <p>{`let과 const는 같은 이름의 변수를 다시 선언할 수 없다.`}</p>\n    <hr></hr>\n    <h3>{`블록 유효 범위 변수로 정보를 격리하라`}</h3>\n    <blockquote>\n      <h5 parentName=\"blockquote\">{`호이스팅`}</h5>\n      <p parentName=\"blockquote\">{`자바스크립트에서는 함수나 변수를 작성하기 전에도 사용이 가능하다.\n이는 자바스크립트에서 컨텍스트 실행이 작동하는 방식 때문.`}</p>\n      <p parentName=\"blockquote\">{`변수는 선언하기 전에 초기화하여 사용될 수 있음. 그러나 초기화 없이는 사용 불가\n초기화가 아니 선언만 끌어올림. 만약 변수를 선언한 뒤 나중에 초기화 시켜 사용한다면, 그 값은 undefined`}</p>\n      <p parentName=\"blockquote\"><a parentName=\"p\" {...{\n          \"href\": \"https://developer.mozilla.org/ko/docs/Glossary/Hoisting\"\n        }}>{`Hoisting`}</a></p>\n    </blockquote>\n    <p>{`for나 if문에 사용하는 변수는 var보다는 let을 사용할 것. let을 이용하면 for문이 반복될 때마다 값을 잠금`}</p>\n    <hr></hr>\n    <h3>{`템플릿 리터럴로 변수를 읽을 수 있는 문자열로 변환하라`}</h3>\n    <p>{`템플릿 리터럴은 백틱( \\` )을 사용한다`}</p>\n    <p>{`변수에 할당한 문자열처럼 단순 문자열이 아니라면 특별한 지정자( `}<inlineCode parentName=\"p\">{`\\${ 변수 }`}</inlineCode>{` )로 감싸야 한다`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let name = 'john';\n\nlet str0 = \"Hi, \"+name;\nlet str1 = \\`Hi, \\${name}\\`;\nlet str2 = \\`Hi, \\${name.toUpperCase()}\\`;\n`}</code></pre>\n    <p>{`변수 뿐만 아니라 메서드 호출도 가능하다. 그러나 가능하면 중괄호 내부에서 많은 것을 하지 않는 것이 좋다.`}</p>\n    <p>{`예전 방법이 나은 경우는 추가정보가 없는 두 변수를 연결하는 경우 뿐이다.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}