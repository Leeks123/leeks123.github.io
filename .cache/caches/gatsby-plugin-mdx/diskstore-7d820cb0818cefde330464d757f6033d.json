{"expireTime":9007200851464045000,"key":"gatsby-plugin-mdx-entire-payload-8162019e637a39174089735a2884bcf3-","val":{"mdast":{"type":"root","children":[{"type":"code","lang":"python","meta":null,"value":"from sklearn import datasets\nboston_house_prices = datasets.load_boston()\nprint(boston_house_prices.keys())\nprint(boston_house_prices.data.shape)\nprint(boston_house_prices.feature_names)","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":8,"column":4,"offset":201},"indent":[1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"dict_keys(['data', 'target', 'feature_names', 'DESCR', 'filename'])\n(506, 13)\n['CRIM' 'ZN' 'INDUS' 'CHAS' 'NOX' 'RM' 'AGE' 'DIS' 'RAD' 'TAX' 'PTRATIO'\n 'B' 'LSTAT']","position":{"start":{"line":10,"column":1,"offset":203},"end":{"line":13,"column":18,"offset":383},"indent":[1,1,1]}},{"type":"code","lang":"python","meta":null,"value":"print(boston_house_prices.DESCR)","position":{"start":{"line":17,"column":1,"offset":387},"end":{"line":19,"column":4,"offset":433},"indent":[1,1]}},{"type":"code","lang":null,"meta":null,"value":".. _boston_dataset:\n\nBoston house prices dataset\n---------------------------\n\n**Data Set Characteristics:**\n\n    :Number of Instances: 506 \n\n    :Number of Attributes: 13 numeric/categorical predictive. Median Value (attribute 14) is usually the target.\n\n    :Attribute Information (in order):\n        - CRIM     per capita crime rate by town\n        - ZN       proportion of residential land zoned for lots over 25,000 sq.ft.\n        - INDUS    proportion of non-retail business acres per town\n        - CHAS     Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)\n        - NOX      nitric oxides concentration (parts per 10 million)\n        - RM       average number of rooms per dwelling\n        - AGE      proportion of owner-occupied units built prior to 1940\n        - DIS      weighted distances to five Boston employment centres\n        - RAD      index of accessibility to radial highways\n        - TAX      full-value property-tax rate per $10,000\n        - PTRATIO  pupil-teacher ratio by town\n        - B        1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town\n        - LSTAT    % lower status of the population\n        - MEDV     Median value of owner-occupied homes in $1000's\n\n    :Missing Attribute Values: None\n\n    :Creator: Harrison, D. and Rubinfeld, D.L.\n\nThis is a copy of UCI ML housing dataset.\nhttps://archive.ics.uci.edu/ml/machine-learning-databases/housing/\n\n\nThis dataset was taken from the StatLib library which is maintained at Carnegie Mellon University.\n\nThe Boston house-price data of Harrison, D. and Rubinfeld, D.L. 'Hedonic\nprices and the demand for clean air', J. Environ. Economics & Management,\nvol.5, 81-102, 1978.   Used in Belsley, Kuh & Welsch, 'Regression diagnostics\n...', Wiley, 1980.   N.B. Various transformations are used in the table on\npages 244-261 of the latter.\n\nThe Boston house-price data has been used in many machine learning papers that address regression\nproblems.   \n     \n.. topic:: References\n\n   - Belsley, Kuh & Welsch, 'Regression diagnostics: Identifying Influential Data and Sources of Collinearity', Wiley, 1980. 244-261.\n   - Quinlan,R. (1993). Combining Instance-Based and Model-Based Learning. In Proceedings on the Tenth International Conference of Machine Learning, 236-243, University of Massachusetts, Amherst. Morgan Kaufmann.","position":{"start":{"line":21,"column":1,"offset":435},"end":{"line":71,"column":5,"offset":2978},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"데이터프레임으로 정제","position":{"start":{"line":74,"column":5,"offset":2985},"end":{"line":74,"column":16,"offset":2996},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":2981},"end":{"line":74,"column":16,"offset":2996},"indent":[]}},{"type":"code","lang":"python","meta":null,"value":"data_frame = pd.DataFrame(boston_house_prices.data)\ndata_frame.tail()","position":{"start":{"line":77,"column":1,"offset":2999},"end":{"line":80,"column":4,"offset":3082},"indent":[1,1,1]}},{"type":"code","lang":"python","meta":null,"value":"data_frame.columns = boston_house_prices.feature_names\ndata_frame['Price'] = boston_house_prices.target\ndata_frame.tail()","position":{"start":{"line":85,"column":1,"offset":3087},"end":{"line":89,"column":4,"offset":3222},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"산점도 표현","position":{"start":{"line":94,"column":5,"offset":3231},"end":{"line":94,"column":11,"offset":3237},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":3227},"end":{"line":94,"column":11,"offset":3237},"indent":[]}},{"type":"code","lang":"python","meta":null,"value":"data_frame.plot(kind=\"scatter\",x=\"RM\",y=\"Price\",figsize=(6,6),color='black', xlim=(4,8), ylim=(10,45))","position":{"start":{"line":97,"column":1,"offset":3240},"end":{"line":99,"column":4,"offset":3356},"indent":[1,1]}},{"type":"code","lang":null,"meta":null,"value":"<matplotlib.axes._subplots.AxesSubplot at 0x11f4fea00>","position":{"start":{"line":104,"column":1,"offset":3361},"end":{"line":104,"column":59,"offset":3419},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"ch3_simplelinearModel_files/ch3_simplelinearModel_25_1.png","alt":"png","position":{"start":{"line":109,"column":1,"offset":3424},"end":{"line":109,"column":67,"offset":3490},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":3424},"end":{"line":109,"column":67,"offset":3490},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"데이터 훈련","position":{"start":{"line":112,"column":5,"offset":3497},"end":{"line":112,"column":11,"offset":3503},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":3493},"end":{"line":112,"column":11,"offset":3503},"indent":[]}},{"type":"code","lang":"python","meta":null,"value":"linear_regression = linear_model.LinearRegression()\nlinear_regression.fit(X=pd.DataFrame(data_frame[\"RM\"]),y=data_frame[\"Price\"])\nprediction = linear_regression.predict(X=pd.DataFrame(data_frame[\"RM\"]))\nprint(\"a value = \", linear_regression.intercept_)\nprint(\"b value = \",linear_regression.coef_)","position":{"start":{"line":115,"column":1,"offset":3506},"end":{"line":121,"column":4,"offset":3816},"indent":[1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"a value =  -34.67062077643857\nb value =  [9.10210898]","position":{"start":{"line":123,"column":1,"offset":3818},"end":{"line":124,"column":28,"offset":3879},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"적합도 검증","position":{"start":{"line":127,"column":5,"offset":3886},"end":{"line":127,"column":11,"offset":3892},"indent":[]}}],"position":{"start":{"line":127,"column":1,"offset":3882},"end":{"line":127,"column":11,"offset":3892},"indent":[]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"잔차","position":{"start":{"line":128,"column":7,"offset":3899},"end":{"line":128,"column":9,"offset":3901},"indent":[]}}],"position":{"start":{"line":128,"column":1,"offset":3893},"end":{"line":128,"column":9,"offset":3901},"indent":[]}},{"type":"code","lang":"python","meta":null,"value":"residuals = data_frame[\"Price\"] - prediction\nresiduals.describe()","position":{"start":{"line":131,"column":1,"offset":3904},"end":{"line":134,"column":4,"offset":3983},"indent":[1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"count    5.060000e+02\nmean     1.899227e-15\nstd      6.609606e+00\nmin     -2.334590e+01\n25%     -2.547477e+00\n50%      8.976267e-02\n75%      2.985532e+00\nmax      3.943314e+01\nName: Price, dtype: float64","position":{"start":{"line":139,"column":1,"offset":3988},"end":{"line":147,"column":32,"offset":4227},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":5,"children":[{"type":"text","value":"결정계수","position":{"start":{"line":151,"column":7,"offset":4237},"end":{"line":151,"column":11,"offset":4241},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":4231},"end":{"line":151,"column":11,"offset":4241},"indent":[]}},{"type":"code","lang":"python","meta":null,"value":"SSE = (residuals**2).sum()\nSST = ((data_frame[\"Price\"]-data_frame[\"Price\"].mean())**2).sum()\nR_squared = 1 - (SSE/SST)\nprint(\"R_squared = \", R_squared)","position":{"start":{"line":154,"column":1,"offset":4244},"end":{"line":159,"column":4,"offset":4409},"indent":[1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"R_squared =  0.4835254559913341","position":{"start":{"line":161,"column":1,"offset":4411},"end":{"line":161,"column":36,"offset":4446},"indent":[]}},{"type":"code","lang":"python","meta":null,"value":"data_frame.plot(kind=\"scatter\",x=5,y=\"Price\",figsize=(6,6),color=\"black\",xlim=(4,8),ylim=(10,45))\n\nplt.plot(data_frame[\"RM\"],prediction,color=\"blue\")","position":{"start":{"line":165,"column":1,"offset":4450},"end":{"line":169,"column":4,"offset":4613},"indent":[1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"[<matplotlib.lines.Line2D at 0x11f75cfa0>]","position":{"start":{"line":174,"column":1,"offset":4618},"end":{"line":174,"column":47,"offset":4664},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"ch3_simplelinearModel_files/ch3_simplelinearModel_32_1.png","alt":"png","position":{"start":{"line":179,"column":1,"offset":4669},"end":{"line":179,"column":67,"offset":4735},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":4669},"end":{"line":179,"column":67,"offset":4735},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"성능평가","position":{"start":{"line":182,"column":5,"offset":4742},"end":{"line":182,"column":9,"offset":4746},"indent":[]}}],"position":{"start":{"line":182,"column":1,"offset":4738},"end":{"line":182,"column":9,"offset":4746},"indent":[]}},{"type":"code","lang":"python","meta":null,"value":"print('score = ',linear_regression.score(X=pd.DataFrame(data_frame[5]),y=data_frame['Price']))\nprint('Mean_Squared_Error = ',mean_squared_error(prediction, data_frame['Price']))\nprint('RMSE = ',mean_squared_error(prediction, data_frame['Price'])**0.5)","position":{"start":{"line":185,"column":1,"offset":4749},"end":{"line":189,"column":4,"offset":5014},"indent":[1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"score =  0.48352545599133423\nMean_Squared_Error =  43.60055177116956\nRMSE =  6.603071389222561","position":{"start":{"line":191,"column":1,"offset":5016},"end":{"line":193,"column":30,"offset":5122},"indent":[1,1]}},{"type":"code","lang":"python","meta":null,"value":"","position":{"start":{"line":197,"column":1,"offset":5126},"end":{"line":199,"column":4,"offset":5140},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"<파이썬을 이용한 빅데이터 분석> ch3\",\"date\":\"2020-08-06T00:00:00.000Z\",\"tags\":[\"Python\",\"BigData\",\"MachineLearning\"]}","position":{"start":{"line":201,"column":1,"offset":5142},"end":{"line":201,"column":143,"offset":5284},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":201,"column":143,"offset":5284}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"<파이썬을 이용한 빅데이터 분석> ch3\",\n  \"date\": \"2020-08-06T00:00:00.000Z\",\n  \"tags\": [\"Python\", \"BigData\", \"MachineLearning\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"from sklearn import datasets\\nboston_house_prices = datasets.load_boston()\\nprint(boston_house_prices.keys())\\nprint(boston_house_prices.data.shape)\\nprint(boston_house_prices.feature_names)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"dict_keys(['data', 'target', 'feature_names', 'DESCR', 'filename'])\\n(506, 13)\\n['CRIM' 'ZN' 'INDUS' 'CHAS' 'NOX' 'RM' 'AGE' 'DIS' 'RAD' 'TAX' 'PTRATIO'\\n 'B' 'LSTAT']\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"print(boston_house_prices.DESCR)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \".. _boston_dataset:\\n\\nBoston house prices dataset\\n---------------------------\\n\\n**Data Set Characteristics:**\\n\\n    :Number of Instances: 506 \\n\\n    :Number of Attributes: 13 numeric/categorical predictive. Median Value (attribute 14) is usually the target.\\n\\n    :Attribute Information (in order):\\n        - CRIM     per capita crime rate by town\\n        - ZN       proportion of residential land zoned for lots over 25,000 sq.ft.\\n        - INDUS    proportion of non-retail business acres per town\\n        - CHAS     Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)\\n        - NOX      nitric oxides concentration (parts per 10 million)\\n        - RM       average number of rooms per dwelling\\n        - AGE      proportion of owner-occupied units built prior to 1940\\n        - DIS      weighted distances to five Boston employment centres\\n        - RAD      index of accessibility to radial highways\\n        - TAX      full-value property-tax rate per $10,000\\n        - PTRATIO  pupil-teacher ratio by town\\n        - B        1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town\\n        - LSTAT    % lower status of the population\\n        - MEDV     Median value of owner-occupied homes in $1000's\\n\\n    :Missing Attribute Values: None\\n\\n    :Creator: Harrison, D. and Rubinfeld, D.L.\\n\\nThis is a copy of UCI ML housing dataset.\\nhttps://archive.ics.uci.edu/ml/machine-learning-databases/housing/\\n\\n\\nThis dataset was taken from the StatLib library which is maintained at Carnegie Mellon University.\\n\\nThe Boston house-price data of Harrison, D. and Rubinfeld, D.L. 'Hedonic\\nprices and the demand for clean air', J. Environ. Economics & Management,\\nvol.5, 81-102, 1978.   Used in Belsley, Kuh & Welsch, 'Regression diagnostics\\n...', Wiley, 1980.   N.B. Various transformations are used in the table on\\npages 244-261 of the latter.\\n\\nThe Boston house-price data has been used in many machine learning papers that address regression\\nproblems.   \\n     \\n.. topic:: References\\n\\n   - Belsley, Kuh & Welsch, 'Regression diagnostics: Identifying Influential Data and Sources of Collinearity', Wiley, 1980. 244-261.\\n   - Quinlan,R. (1993). Combining Instance-Based and Model-Based Learning. In Proceedings on the Tenth International Conference of Machine Learning, 236-243, University of Massachusetts, Amherst. Morgan Kaufmann.\\n\")), mdx(\"h3\", null, \"\\uB370\\uC774\\uD130\\uD504\\uB808\\uC784\\uC73C\\uB85C \\uC815\\uC81C\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"data_frame = pd.DataFrame(boston_house_prices.data)\\ndata_frame.tail()\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"data_frame.columns = boston_house_prices.feature_names\\ndata_frame['Price'] = boston_house_prices.target\\ndata_frame.tail()\\n\")), mdx(\"h3\", null, \"\\uC0B0\\uC810\\uB3C4 \\uD45C\\uD604\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"data_frame.plot(kind=\\\"scatter\\\",x=\\\"RM\\\",y=\\\"Price\\\",figsize=(6,6),color='black', xlim=(4,8), ylim=(10,45))\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"<matplotlib.axes._subplots.AxesSubplot at 0x11f4fea00>\\n\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"ch3_simplelinearModel_files/ch3_simplelinearModel_25_1.png\",\n    \"alt\": \"png\"\n  }))), mdx(\"h3\", null, \"\\uB370\\uC774\\uD130 \\uD6C8\\uB828\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"linear_regression = linear_model.LinearRegression()\\nlinear_regression.fit(X=pd.DataFrame(data_frame[\\\"RM\\\"]),y=data_frame[\\\"Price\\\"])\\nprediction = linear_regression.predict(X=pd.DataFrame(data_frame[\\\"RM\\\"]))\\nprint(\\\"a value = \\\", linear_regression.intercept_)\\nprint(\\\"b value = \\\",linear_regression.coef_)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"a value =  -34.67062077643857\\nb value =  [9.10210898]\\n\")), mdx(\"h3\", null, \"\\uC801\\uD569\\uB3C4 \\uAC80\\uC99D\"), mdx(\"h5\", null, \"\\uC794\\uCC28\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"residuals = data_frame[\\\"Price\\\"] - prediction\\nresiduals.describe()\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"count    5.060000e+02\\nmean     1.899227e-15\\nstd      6.609606e+00\\nmin     -2.334590e+01\\n25%     -2.547477e+00\\n50%      8.976267e-02\\n75%      2.985532e+00\\nmax      3.943314e+01\\nName: Price, dtype: float64\\n\")), mdx(\"h5\", null, \"\\uACB0\\uC815\\uACC4\\uC218\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"SSE = (residuals**2).sum()\\nSST = ((data_frame[\\\"Price\\\"]-data_frame[\\\"Price\\\"].mean())**2).sum()\\nR_squared = 1 - (SSE/SST)\\nprint(\\\"R_squared = \\\", R_squared)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"R_squared =  0.4835254559913341\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"data_frame.plot(kind=\\\"scatter\\\",x=5,y=\\\"Price\\\",figsize=(6,6),color=\\\"black\\\",xlim=(4,8),ylim=(10,45))\\n\\nplt.plot(data_frame[\\\"RM\\\"],prediction,color=\\\"blue\\\")\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"[<matplotlib.lines.Line2D at 0x11f75cfa0>]\\n\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"ch3_simplelinearModel_files/ch3_simplelinearModel_32_1.png\",\n    \"alt\": \"png\"\n  }))), mdx(\"h3\", null, \"\\uC131\\uB2A5\\uD3C9\\uAC00\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"print('score = ',linear_regression.score(X=pd.DataFrame(data_frame[5]),y=data_frame['Price']))\\nprint('Mean_Squared_Error = ',mean_squared_error(prediction, data_frame['Price']))\\nprint('RMSE = ',mean_squared_error(prediction, data_frame['Price'])**0.5)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"score =  0.48352545599133423\\nMean_Squared_Error =  43.60055177116956\\nRMSE =  6.603071389222561\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"<파이썬을 이용한 빅데이터 분석> ch3\",\n  \"date\": \"2020-08-06T00:00:00.000Z\",\n  \"tags\": [\"Python\", \"BigData\", \"MachineLearning\"]\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`from sklearn import datasets\nboston_house_prices = datasets.load_boston()\nprint(boston_house_prices.keys())\nprint(boston_house_prices.data.shape)\nprint(boston_house_prices.feature_names)\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`dict_keys(['data', 'target', 'feature_names', 'DESCR', 'filename'])\n(506, 13)\n['CRIM' 'ZN' 'INDUS' 'CHAS' 'NOX' 'RM' 'AGE' 'DIS' 'RAD' 'TAX' 'PTRATIO'\n 'B' 'LSTAT']\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`print(boston_house_prices.DESCR)\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`.. _boston_dataset:\n\nBoston house prices dataset\n---------------------------\n\n**Data Set Characteristics:**\n\n    :Number of Instances: 506 \n\n    :Number of Attributes: 13 numeric/categorical predictive. Median Value (attribute 14) is usually the target.\n\n    :Attribute Information (in order):\n        - CRIM     per capita crime rate by town\n        - ZN       proportion of residential land zoned for lots over 25,000 sq.ft.\n        - INDUS    proportion of non-retail business acres per town\n        - CHAS     Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)\n        - NOX      nitric oxides concentration (parts per 10 million)\n        - RM       average number of rooms per dwelling\n        - AGE      proportion of owner-occupied units built prior to 1940\n        - DIS      weighted distances to five Boston employment centres\n        - RAD      index of accessibility to radial highways\n        - TAX      full-value property-tax rate per $10,000\n        - PTRATIO  pupil-teacher ratio by town\n        - B        1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town\n        - LSTAT    % lower status of the population\n        - MEDV     Median value of owner-occupied homes in $1000's\n\n    :Missing Attribute Values: None\n\n    :Creator: Harrison, D. and Rubinfeld, D.L.\n\nThis is a copy of UCI ML housing dataset.\nhttps://archive.ics.uci.edu/ml/machine-learning-databases/housing/\n\n\nThis dataset was taken from the StatLib library which is maintained at Carnegie Mellon University.\n\nThe Boston house-price data of Harrison, D. and Rubinfeld, D.L. 'Hedonic\nprices and the demand for clean air', J. Environ. Economics & Management,\nvol.5, 81-102, 1978.   Used in Belsley, Kuh & Welsch, 'Regression diagnostics\n...', Wiley, 1980.   N.B. Various transformations are used in the table on\npages 244-261 of the latter.\n\nThe Boston house-price data has been used in many machine learning papers that address regression\nproblems.   \n     \n.. topic:: References\n\n   - Belsley, Kuh & Welsch, 'Regression diagnostics: Identifying Influential Data and Sources of Collinearity', Wiley, 1980. 244-261.\n   - Quinlan,R. (1993). Combining Instance-Based and Model-Based Learning. In Proceedings on the Tenth International Conference of Machine Learning, 236-243, University of Massachusetts, Amherst. Morgan Kaufmann.\n`}</code></pre>\n    <h3>{`데이터프레임으로 정제`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`data_frame = pd.DataFrame(boston_house_prices.data)\ndata_frame.tail()\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`data_frame.columns = boston_house_prices.feature_names\ndata_frame['Price'] = boston_house_prices.target\ndata_frame.tail()\n`}</code></pre>\n    <h3>{`산점도 표현`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`data_frame.plot(kind=\"scatter\",x=\"RM\",y=\"Price\",figsize=(6,6),color='black', xlim=(4,8), ylim=(10,45))\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`<matplotlib.axes._subplots.AxesSubplot at 0x11f4fea00>\n`}</code></pre>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"ch3_simplelinearModel_files/ch3_simplelinearModel_25_1.png\",\n        \"alt\": \"png\"\n      }}></img></p>\n    <h3>{`데이터 훈련`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`linear_regression = linear_model.LinearRegression()\nlinear_regression.fit(X=pd.DataFrame(data_frame[\"RM\"]),y=data_frame[\"Price\"])\nprediction = linear_regression.predict(X=pd.DataFrame(data_frame[\"RM\"]))\nprint(\"a value = \", linear_regression.intercept_)\nprint(\"b value = \",linear_regression.coef_)\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`a value =  -34.67062077643857\nb value =  [9.10210898]\n`}</code></pre>\n    <h3>{`적합도 검증`}</h3>\n    <h5>{`잔차`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`residuals = data_frame[\"Price\"] - prediction\nresiduals.describe()\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`count    5.060000e+02\nmean     1.899227e-15\nstd      6.609606e+00\nmin     -2.334590e+01\n25%     -2.547477e+00\n50%      8.976267e-02\n75%      2.985532e+00\nmax      3.943314e+01\nName: Price, dtype: float64\n`}</code></pre>\n    <h5>{`결정계수`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`SSE = (residuals**2).sum()\nSST = ((data_frame[\"Price\"]-data_frame[\"Price\"].mean())**2).sum()\nR_squared = 1 - (SSE/SST)\nprint(\"R_squared = \", R_squared)\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`R_squared =  0.4835254559913341\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`data_frame.plot(kind=\"scatter\",x=5,y=\"Price\",figsize=(6,6),color=\"black\",xlim=(4,8),ylim=(10,45))\n\nplt.plot(data_frame[\"RM\"],prediction,color=\"blue\")\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`[<matplotlib.lines.Line2D at 0x11f75cfa0>]\n`}</code></pre>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"ch3_simplelinearModel_files/ch3_simplelinearModel_32_1.png\",\n        \"alt\": \"png\"\n      }}></img></p>\n    <h3>{`성능평가`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`print('score = ',linear_regression.score(X=pd.DataFrame(data_frame[5]),y=data_frame['Price']))\nprint('Mean_Squared_Error = ',mean_squared_error(prediction, data_frame['Price']))\nprint('RMSE = ',mean_squared_error(prediction, data_frame['Price'])**0.5)\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`score =  0.48352545599133423\nMean_Squared_Error =  43.60055177116956\nRMSE =  6.603071389222561\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{``}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}