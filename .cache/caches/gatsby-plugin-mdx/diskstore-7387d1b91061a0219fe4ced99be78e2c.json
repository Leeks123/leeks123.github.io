{"expireTime":9007200852000205000,"key":"gatsby-plugin-mdx-entire-payload-3e3a7eadf17b08950fcb609b5a4de5bf-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"key와 value의 쌍으로 이뤄진 트리","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":23,"offset":23},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":23,"offset":23},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"key는 중복을 허용하지 않고, value는 중복을 허용함","position":{"start":{"line":4,"column":1,"offset":25},"end":{"line":4,"column":33,"offset":57},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":25},"end":{"line":4,"column":33,"offset":57},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"key의 중복은 MultiMap을 사용해야함","position":{"start":{"line":6,"column":1,"offset":59},"end":{"line":6,"column":25,"offset":83},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":59},"end":{"line":6,"column":25,"offset":83},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"검색, 삽입, 삭제 등의 속도가 O(logN)으로 빠름","position":{"start":{"line":8,"column":1,"offset":85},"end":{"line":8,"column":31,"offset":115},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":85},"end":{"line":8,"column":31,"offset":115},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"#include <iostream>\n#include <map>\nusing namespace std;\nint main(){\n\t//int 자료형을 key로 int 자료형을 데이터로 저장하는 딕셔너리 자료구조 생성\n\tmap<int, int> m;\n\t//(4, 5)원소 삽입\n\tm.insert(make_pair(4, 5));\n\t//또는\n\tm[5]=6;\n\t//key와 연관된 원소를 pair<키 자료형, 데이터 자료형> 형태로 리턴함\n\tprintf(\"%d\\n\", m.find(4)->second);\n\t//key와 연관된 원소의 개수를 리턴함\n\tprintf(\"%d\\n\", m.count(4));\n\t//저장된 원소의 수를 리턴함\n\tprintf(\"%d\\n\", m.size());\n\t//해당 주소의 원소 삭제, key값을 넣어도 가능\n    // m.erase(4);\n\tm.erase(++m.begin());\n\t//모든 원소 삭제\n\tm.clear();\n\treturn 0;\n}","position":{"start":{"line":10,"column":1,"offset":117},"end":{"line":34,"column":4,"offset":608},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"CPP STL - Map\",\"date\":\"2020-08-07T00:00:00.000Z\",\"tags\":[\"CPP\"]}","position":{"start":{"line":38,"column":1,"offset":612},"end":{"line":38,"column":103,"offset":714},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":38,"column":103,"offset":714}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"CPP STL - Map\",\n  \"date\": \"2020-08-07T00:00:00.000Z\",\n  \"tags\": [\"CPP\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"key\\uC640 value\\uC758 \\uC30D\\uC73C\\uB85C \\uC774\\uB904\\uC9C4 \\uD2B8\\uB9AC\"), mdx(\"p\", null, \"key\\uB294 \\uC911\\uBCF5\\uC744 \\uD5C8\\uC6A9\\uD558\\uC9C0 \\uC54A\\uACE0, value\\uB294 \\uC911\\uBCF5\\uC744 \\uD5C8\\uC6A9\\uD568\"), mdx(\"p\", null, \"key\\uC758 \\uC911\\uBCF5\\uC740 MultiMap\\uC744 \\uC0AC\\uC6A9\\uD574\\uC57C\\uD568\"), mdx(\"p\", null, \"\\uAC80\\uC0C9, \\uC0BD\\uC785, \\uC0AD\\uC81C \\uB4F1\\uC758 \\uC18D\\uB3C4\\uAC00 O(logN)\\uC73C\\uB85C \\uBE60\\uB984\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"#include <iostream>\\n#include <map>\\nusing namespace std;\\nint main(){\\n    //int \\uC790\\uB8CC\\uD615\\uC744 key\\uB85C int \\uC790\\uB8CC\\uD615\\uC744 \\uB370\\uC774\\uD130\\uB85C \\uC800\\uC7A5\\uD558\\uB294 \\uB515\\uC154\\uB108\\uB9AC \\uC790\\uB8CC\\uAD6C\\uC870 \\uC0DD\\uC131\\n    map<int, int> m;\\n    //(4, 5)\\uC6D0\\uC18C \\uC0BD\\uC785\\n    m.insert(make_pair(4, 5));\\n    //\\uB610\\uB294\\n    m[5]=6;\\n    //key\\uC640 \\uC5F0\\uAD00\\uB41C \\uC6D0\\uC18C\\uB97C pair<\\uD0A4 \\uC790\\uB8CC\\uD615, \\uB370\\uC774\\uD130 \\uC790\\uB8CC\\uD615> \\uD615\\uD0DC\\uB85C \\uB9AC\\uD134\\uD568\\n    printf(\\\"%d\\\\n\\\", m.find(4)->second);\\n    //key\\uC640 \\uC5F0\\uAD00\\uB41C \\uC6D0\\uC18C\\uC758 \\uAC1C\\uC218\\uB97C \\uB9AC\\uD134\\uD568\\n    printf(\\\"%d\\\\n\\\", m.count(4));\\n    //\\uC800\\uC7A5\\uB41C \\uC6D0\\uC18C\\uC758 \\uC218\\uB97C \\uB9AC\\uD134\\uD568\\n    printf(\\\"%d\\\\n\\\", m.size());\\n    //\\uD574\\uB2F9 \\uC8FC\\uC18C\\uC758 \\uC6D0\\uC18C \\uC0AD\\uC81C, key\\uAC12\\uC744 \\uB123\\uC5B4\\uB3C4 \\uAC00\\uB2A5\\n    // m.erase(4);\\n    m.erase(++m.begin());\\n    //\\uBAA8\\uB4E0 \\uC6D0\\uC18C \\uC0AD\\uC81C\\n    m.clear();\\n    return 0;\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"CPP STL - Map\",\n  \"date\": \"2020-08-07T00:00:00.000Z\",\n  \"tags\": [\"CPP\"]\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`key와 value의 쌍으로 이뤄진 트리`}</p>\n    <p>{`key는 중복을 허용하지 않고, value는 중복을 허용함`}</p>\n    <p>{`key의 중복은 MultiMap을 사용해야함`}</p>\n    <p>{`검색, 삽입, 삭제 등의 속도가 O(logN)으로 빠름`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`#include <iostream>\n#include <map>\nusing namespace std;\nint main(){\n    //int 자료형을 key로 int 자료형을 데이터로 저장하는 딕셔너리 자료구조 생성\n    map<int, int> m;\n    //(4, 5)원소 삽입\n    m.insert(make_pair(4, 5));\n    //또는\n    m[5]=6;\n    //key와 연관된 원소를 pair<키 자료형, 데이터 자료형> 형태로 리턴함\n    printf(\"%d\\\\n\", m.find(4)->second);\n    //key와 연관된 원소의 개수를 리턴함\n    printf(\"%d\\\\n\", m.count(4));\n    //저장된 원소의 수를 리턴함\n    printf(\"%d\\\\n\", m.size());\n    //해당 주소의 원소 삭제, key값을 넣어도 가능\n    // m.erase(4);\n    m.erase(++m.begin());\n    //모든 원소 삭제\n    m.clear();\n    return 0;\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}