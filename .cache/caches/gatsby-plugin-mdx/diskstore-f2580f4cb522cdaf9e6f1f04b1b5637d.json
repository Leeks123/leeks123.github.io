{"expireTime":9007200852250421000,"key":"gatsby-plugin-mdx-entire-payload-ea50bd58151238e5d3bdc047d11cfee2-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":3,"children":[{"type":"text","value":"객체를 이용해 정적인 키-값을 탐색하라","position":{"start":{"line":2,"column":5,"offset":5},"end":{"line":2,"column":26,"offset":26},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":26,"offset":26},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"객체는 변호가 없고 구조화된 키-값 데이터를 다루는 경우에 유용하다. \n반면 자주 갱신되거나 실행되기 전에는 알 수 없는 동적인 정보를 다루기에는 적합하지 않다","position":{"start":{"line":4,"column":1,"offset":28},"end":{"line":5,"column":50,"offset":117},"indent":[1]}}],"position":{"start":{"line":4,"column":1,"offset":28},"end":{"line":5,"column":50,"offset":117},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"객체는 정보의 경로를 알고 있을 떄 적절한 방법","position":{"start":{"line":7,"column":1,"offset":119},"end":{"line":7,"column":27,"offset":145},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":119},"end":{"line":7,"column":27,"offset":145},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":9,"column":1,"offset":147},"end":{"line":9,"column":4,"offset":150},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Object.assign( )으로 조작 없이 객체를 생성하라","position":{"start":{"line":11,"column":5,"offset":156},"end":{"line":11,"column":38,"offset":189},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":152},"end":{"line":11,"column":38,"offset":189},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const o = {a:1, b:1};\nconst base = {};\nconst clone = Object.assign(base,o);\n// base == {a:1, b:1} == clone","position":{"start":{"line":13,"column":1,"offset":191},"end":{"line":18,"column":4,"offset":315},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"assign( )을 이용하면 원본 객체를 조작한다.","position":{"start":{"line":20,"column":1,"offset":317},"end":{"line":20,"column":29,"offset":345},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":317},"end":{"line":20,"column":29,"offset":345},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"그럴땐","position":{"start":{"line":22,"column":1,"offset":347},"end":{"line":22,"column":4,"offset":350},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":347},"end":{"line":22,"column":4,"offset":350},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const base2 = {};\nconst clone2 = Object.assign({},base,o);\n// base2 == {}\n// clone2 == {a:1, b:1}","position":{"start":{"line":24,"column":1,"offset":352},"end":{"line":29,"column":4,"offset":467},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"객체가 중첩될 경우 문제가 발생한다. ","position":{"start":{"line":33,"column":1,"offset":471},"end":{"line":33,"column":22,"offset":492},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":471},"end":{"line":33,"column":22,"offset":492},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const defaultEmployee = {\n  name : {\n    first : '', last : '',\n  },\n  year : 0,\n};\nconst employee = Object.assign({},defaultEmployee);\nemployee.name.first = 'tom';\nconsole.log(defaultEmployee.name.first); // 'tom'","position":{"start":{"line":35,"column":1,"offset":494},"end":{"line":45,"column":4,"offset":726},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"year","position":{"start":{"line":47,"column":1,"offset":728},"end":{"line":47,"column":7,"offset":734},"indent":[]}},{"type":"text","value":" 의 경우 잘 복사되지만, ","position":{"start":{"line":47,"column":7,"offset":734},"end":{"line":47,"column":22,"offset":749},"indent":[]}},{"type":"inlineCode","value":"name","position":{"start":{"line":47,"column":22,"offset":749},"end":{"line":47,"column":28,"offset":755},"indent":[]}},{"type":"text","value":" 의 경우 객체의 참조 주소만 복사하기 때문에 원본, 복사본 모두 중첩된 객체의 값이 변경된다.","position":{"start":{"line":47,"column":28,"offset":755},"end":{"line":47,"column":81,"offset":808},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":728},"end":{"line":47,"column":81,"offset":808},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"객체의 중첩은 안쓰는게 제일 좋지만 불가피한 경우가 있다.\n그럴땐","position":{"start":{"line":49,"column":1,"offset":810},"end":{"line":50,"column":4,"offset":846},"indent":[1]}}],"position":{"start":{"line":49,"column":1,"offset":810},"end":{"line":50,"column":4,"offset":846},"indent":[1]}},{"type":"code","lang":"javascript","meta":null,"value":"const employee2 = Object.assign(\n\t{},\n  defaultEmployee,\n  {\n    name: Object.assign({},defaultEmployee.name),\n  },\n);\nexport {default};","position":{"start":{"line":52,"column":1,"offset":848},"end":{"line":61,"column":4,"offset":1002},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"객체 펼침 연산자로 정보를 갱신하라","position":{"start":{"line":63,"column":5,"offset":1008},"end":{"line":63,"column":24,"offset":1027},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":1004},"end":{"line":63,"column":24,"offset":1027},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const defaultObject = {\n  a : 1,\n  b : 2,\n};\nconst update = { ...defaultObject, c : 3};\n// { a:1,b:2,c:3 } ","position":{"start":{"line":65,"column":1,"offset":1029},"end":{"line":72,"column":4,"offset":1154},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"전 주제의 중첩된 객체 문제도 처리가능하다","position":{"start":{"line":74,"column":1,"offset":1156},"end":{"line":74,"column":24,"offset":1179},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":1156},"end":{"line":74,"column":24,"offset":1179},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const defaultEmployee = {\n  name : {\n    first : '', last : '',\n  },\n  year : 0,\n};\nconst employee = {\n  ...defaultEmployee,\n  name : {\n    ...defaultEmployee.name,\n  },\n};","position":{"start":{"line":76,"column":1,"offset":1181},"end":{"line":89,"column":4,"offset":1371},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":91,"column":1,"offset":1373},"end":{"line":91,"column":4,"offset":1376},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"맵으로 명확하게 키-값 데이터를 갱신하라","position":{"start":{"line":93,"column":5,"offset":1382},"end":{"line":93,"column":27,"offset":1404},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":1378},"end":{"line":93,"column":27,"offset":1404},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"키-값 데이터가 자주 바뀌는 경우엔 객체가 아닌 맵을 이용한다.","position":{"start":{"line":95,"column":1,"offset":1406},"end":{"line":95,"column":36,"offset":1441},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":1406},"end":{"line":95,"column":36,"offset":1441},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"let filters = new Map() // 체이닝으로 여러 데이터 추가하기\n\t.set('견종','레브라도레트리버')\n\t.set('크기','대형견')\n\t.set('색상','갈색');\nfilters.get('크기'); // '대형견'","position":{"start":{"line":97,"column":1,"offset":1443},"end":{"line":103,"column":4,"offset":1592},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"배열형태로도 생성이 가능하다","position":{"start":{"line":105,"column":1,"offset":1594},"end":{"line":105,"column":16,"offset":1609},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":1594},"end":{"line":105,"column":16,"offset":1609},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"let filters = new Map(\n  [\n    ['견종','래브라도레트리버'],\n    ['크기','대형견'],\n    ['색상','갈색'],\n  ]\n)\nfilters.get('색상'); // '갈색'","position":{"start":{"line":107,"column":1,"offset":1611},"end":{"line":116,"column":4,"offset":1746},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"삭제할 때는","position":{"start":{"line":118,"column":1,"offset":1748},"end":{"line":118,"column":7,"offset":1754},"indent":[]}}],"position":{"start":{"line":118,"column":1,"offset":1748},"end":{"line":118,"column":7,"offset":1754},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"filters.delete('색상');\n\nfilters.clear();","position":{"start":{"line":120,"column":1,"offset":1756},"end":{"line":124,"column":4,"offset":1813},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"객체의 경우 키에 사용할 수 있는 자료형에 제약이 있다.\n정수를 키로 사용할 수 없다. 키를 정수로 쓸 때는 Map!!","position":{"start":{"line":128,"column":1,"offset":1817},"end":{"line":129,"column":35,"offset":1883},"indent":[1]}}],"position":{"start":{"line":128,"column":1,"offset":1817},"end":{"line":129,"column":35,"offset":1883},"indent":[1]}},{"type":"thematicBreak","position":{"start":{"line":131,"column":1,"offset":1885},"end":{"line":131,"column":4,"offset":1888},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"맵과 펼침 연산자로 키-값 데이터를 순회하라","position":{"start":{"line":133,"column":5,"offset":1894},"end":{"line":133,"column":29,"offset":1918},"indent":[]}}],"position":{"start":{"line":133,"column":1,"offset":1890},"end":{"line":133,"column":29,"offset":1918},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const filters = {\n  color : 'black',\n  type : 'Litriber',\n};\n\nfunction getAppliedFilters(filters) {\n  const keys = Object.keys(filters);\n  keys.sort(); // 순서를 저장하지 않기 때문에 정렬이 필요\n  const applied = [];\n  for (const key of keys) {\n    applied.push(`${key}:${filters[key]}`);\n  }\n  return `선택한 조건은 ${applied.join(', ')} 입니다.`;\n}","position":{"start":{"line":135,"column":1,"offset":1920},"end":{"line":150,"column":4,"offset":2262},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"객체를 순회하는 것은 쉽지 않다는 것을 알 수 있다.","position":{"start":{"line":152,"column":1,"offset":2264},"end":{"line":152,"column":30,"offset":2293},"indent":[]}}],"position":{"start":{"line":152,"column":1,"offset":2264},"end":{"line":152,"column":30,"offset":2293},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"const filters = new Map()\n\t.set('color', 'black')\n\t.set('type', 'Litriber');\n\nfunction checkFilters(filters) {\n  for (const entry of filters) {\n    console.log(entry);\n  }\n}","position":{"start":{"line":154,"column":1,"offset":2295},"end":{"line":164,"column":4,"offset":2486},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Map을 for...of 반복문으로 접근하면 이터레이터는 키-값 쌍을 넘겨준다.","position":{"start":{"line":166,"column":1,"offset":2488},"end":{"line":166,"column":45,"offset":2532},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":2488},"end":{"line":166,"column":45,"offset":2532},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"filters.entries();\n// MapIterator { ['color','black'],['type','Litriber']}","position":{"start":{"line":168,"column":1,"offset":2534},"end":{"line":171,"column":4,"offset":2626},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"맵은 순서를 저장한다. 언제나 맵의 첫 번째 항목을 첫 번째로 받는다. 그러나 배열처럼 정렬 메서드가 내장되어 있지 않다. \n그 문제는 펼침연산자를 통해 해결한다.","position":{"start":{"line":173,"column":1,"offset":2628},"end":{"line":174,"column":22,"offset":2719},"indent":[1]}}],"position":{"start":{"line":173,"column":1,"offset":2628},"end":{"line":174,"column":22,"offset":2719},"indent":[1]}},{"type":"code","lang":"javascript","meta":null,"value":"function sortByKey(a,b){\n  return a[0] > b[0] ? 1: -1;\n}\nfunction getSortedAppliedFilters(filters) {\n  const applied = [];\n  for (const [key,value] of [...filters].sort(sortByKey)) {\n    applied.push(`${key}:${value}`);\n  }\n  return `선택한 조건은 ${applied.join(', ')} 입니다.`;\n}","position":{"start":{"line":176,"column":1,"offset":2721},"end":{"line":187,"column":4,"offset":3011},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"javascript","meta":null,"value":"function getSortedAppliedFilters(filters) {\n  const applied = [...filters]\n  \t.sort(sortByKey)\n  \t.map(([key,value]) => {\n      return `${key}:${value}`;\n    })\n  \t.join(', ');\n  return `선택한 조건은 ${applied} 입니다.`;\n}","position":{"start":{"line":189,"column":1,"offset":3013},"end":{"line":199,"column":4,"offset":3245},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"맵을 배열로 변환","position":{"start":{"line":201,"column":4,"offset":3250},"end":{"line":201,"column":13,"offset":3259},"indent":[]}}],"position":{"start":{"line":201,"column":4,"offset":3250},"end":{"line":201,"column":13,"offset":3259},"indent":[]}}],"position":{"start":{"line":201,"column":1,"offset":3247},"end":{"line":201,"column":13,"offset":3259},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"배열을 정렬","position":{"start":{"line":202,"column":4,"offset":3263},"end":{"line":202,"column":10,"offset":3269},"indent":[]}}],"position":{"start":{"line":202,"column":4,"offset":3263},"end":{"line":202,"column":10,"offset":3269},"indent":[]}}],"position":{"start":{"line":202,"column":1,"offset":3260},"end":{"line":202,"column":10,"offset":3269},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"배열에 담긴 키-값 쌍을 '키:값' 형식의 문자열로 반환","position":{"start":{"line":203,"column":4,"offset":3273},"end":{"line":203,"column":35,"offset":3304},"indent":[]}}],"position":{"start":{"line":203,"column":4,"offset":3273},"end":{"line":203,"column":35,"offset":3304},"indent":[]}}],"position":{"start":{"line":203,"column":1,"offset":3270},"end":{"line":203,"column":35,"offset":3304},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"배열의 항목에 열결해서 문자열을 만듬","position":{"start":{"line":204,"column":4,"offset":3308},"end":{"line":204,"column":24,"offset":3328},"indent":[]}}],"position":{"start":{"line":204,"column":4,"offset":3308},"end":{"line":204,"column":24,"offset":3328},"indent":[]}}],"position":{"start":{"line":204,"column":1,"offset":3305},"end":{"line":204,"column":24,"offset":3328},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"템플릿 리터럴을 이용해서 다른 정보와 함께 문자열로 병합","position":{"start":{"line":205,"column":4,"offset":3332},"end":{"line":205,"column":35,"offset":3363},"indent":[]}}],"position":{"start":{"line":205,"column":4,"offset":3332},"end":{"line":205,"column":35,"offset":3363},"indent":[]}}],"position":{"start":{"line":205,"column":1,"offset":3329},"end":{"line":205,"column":35,"offset":3363},"indent":[]}}],"position":{"start":{"line":201,"column":1,"offset":3247},"end":{"line":205,"column":35,"offset":3363},"indent":[1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":207,"column":1,"offset":3365},"end":{"line":207,"column":4,"offset":3368},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"맵 생성 시 부수효과를 피하라","position":{"start":{"line":209,"column":5,"offset":3374},"end":{"line":209,"column":21,"offset":3390},"indent":[]}}],"position":{"start":{"line":209,"column":1,"offset":3370},"end":{"line":209,"column":21,"offset":3390},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":211,"column":1,"offset":3392},"end":{"line":211,"column":4,"offset":3395},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"세트를 이용해 고유값을 관리하라","position":{"start":{"line":213,"column":5,"offset":3401},"end":{"line":213,"column":22,"offset":3418},"indent":[]}}],"position":{"start":{"line":213,"column":1,"offset":3397},"end":{"line":213,"column":22,"offset":3418},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"function getUnique(attributes) {\n  return [...new Set(attributes)];\n}","position":{"start":{"line":215,"column":1,"offset":3420},"end":{"line":219,"column":4,"offset":3507},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Set은 중복을 제거하고 저장함","position":{"start":{"line":221,"column":1,"offset":3509},"end":{"line":221,"column":18,"offset":3526},"indent":[]}}],"position":{"start":{"line":221,"column":1,"offset":3509},"end":{"line":221,"column":18,"offset":3526},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"<자바스크립트 코딩의 기술> ch3\",\"date\":\"2020-08-02T00:00:00.000Z\",\"tags\":[\"JS\"]}","position":{"start":{"line":223,"column":1,"offset":3528},"end":{"line":223,"column":108,"offset":3635},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":223,"column":108,"offset":3635}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"<자바스크립트 코딩의 기술> ch3\",\n  \"date\": \"2020-08-02T00:00:00.000Z\",\n  \"tags\": [\"JS\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"\\uAC1D\\uCCB4\\uB97C \\uC774\\uC6A9\\uD574 \\uC815\\uC801\\uC778 \\uD0A4-\\uAC12\\uC744 \\uD0D0\\uC0C9\\uD558\\uB77C\"), mdx(\"p\", null, \"\\uAC1D\\uCCB4\\uB294 \\uBCC0\\uD638\\uAC00 \\uC5C6\\uACE0 \\uAD6C\\uC870\\uD654\\uB41C \\uD0A4-\\uAC12 \\uB370\\uC774\\uD130\\uB97C \\uB2E4\\uB8E8\\uB294 \\uACBD\\uC6B0\\uC5D0 \\uC720\\uC6A9\\uD558\\uB2E4.\\n\\uBC18\\uBA74 \\uC790\\uC8FC \\uAC31\\uC2E0\\uB418\\uAC70\\uB098 \\uC2E4\\uD589\\uB418\\uAE30 \\uC804\\uC5D0\\uB294 \\uC54C \\uC218 \\uC5C6\\uB294 \\uB3D9\\uC801\\uC778 \\uC815\\uBCF4\\uB97C \\uB2E4\\uB8E8\\uAE30\\uC5D0\\uB294 \\uC801\\uD569\\uD558\\uC9C0 \\uC54A\\uB2E4\"), mdx(\"p\", null, \"\\uAC1D\\uCCB4\\uB294 \\uC815\\uBCF4\\uC758 \\uACBD\\uB85C\\uB97C \\uC54C\\uACE0 \\uC788\\uC744 \\uB584 \\uC801\\uC808\\uD55C \\uBC29\\uBC95\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Object.assign( )\\uC73C\\uB85C \\uC870\\uC791 \\uC5C6\\uC774 \\uAC1D\\uCCB4\\uB97C \\uC0DD\\uC131\\uD558\\uB77C\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const o = {a:1, b:1};\\nconst base = {};\\nconst clone = Object.assign(base,o);\\n// base == {a:1, b:1} == clone\\n\")), mdx(\"p\", null, \"assign( )\\uC744 \\uC774\\uC6A9\\uD558\\uBA74 \\uC6D0\\uBCF8 \\uAC1D\\uCCB4\\uB97C \\uC870\\uC791\\uD55C\\uB2E4.\"), mdx(\"p\", null, \"\\uADF8\\uB7F4\\uB550\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const base2 = {};\\nconst clone2 = Object.assign({},base,o);\\n// base2 == {}\\n// clone2 == {a:1, b:1}\\n\")), mdx(\"p\", null, \"\\uAC1D\\uCCB4\\uAC00 \\uC911\\uCCA9\\uB420 \\uACBD\\uC6B0 \\uBB38\\uC81C\\uAC00 \\uBC1C\\uC0DD\\uD55C\\uB2E4. \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const defaultEmployee = {\\n  name : {\\n    first : '', last : '',\\n  },\\n  year : 0,\\n};\\nconst employee = Object.assign({},defaultEmployee);\\nemployee.name.first = 'tom';\\nconsole.log(defaultEmployee.name.first); // 'tom'\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"year\"), \" \\uC758 \\uACBD\\uC6B0 \\uC798 \\uBCF5\\uC0AC\\uB418\\uC9C0\\uB9CC, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" \\uC758 \\uACBD\\uC6B0 \\uAC1D\\uCCB4\\uC758 \\uCC38\\uC870 \\uC8FC\\uC18C\\uB9CC \\uBCF5\\uC0AC\\uD558\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uC6D0\\uBCF8, \\uBCF5\\uC0AC\\uBCF8 \\uBAA8\\uB450 \\uC911\\uCCA9\\uB41C \\uAC1D\\uCCB4\\uC758 \\uAC12\\uC774 \\uBCC0\\uACBD\\uB41C\\uB2E4.\"), mdx(\"p\", null, \"\\uAC1D\\uCCB4\\uC758 \\uC911\\uCCA9\\uC740 \\uC548\\uC4F0\\uB294\\uAC8C \\uC81C\\uC77C \\uC88B\\uC9C0\\uB9CC \\uBD88\\uAC00\\uD53C\\uD55C \\uACBD\\uC6B0\\uAC00 \\uC788\\uB2E4.\\n\\uADF8\\uB7F4\\uB550\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const employee2 = Object.assign(\\n    {},\\n  defaultEmployee,\\n  {\\n    name: Object.assign({},defaultEmployee.name),\\n  },\\n);\\nexport {default};\\n\")), mdx(\"h3\", null, \"\\uAC1D\\uCCB4 \\uD3BC\\uCE68 \\uC5F0\\uC0B0\\uC790\\uB85C \\uC815\\uBCF4\\uB97C \\uAC31\\uC2E0\\uD558\\uB77C\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const defaultObject = {\\n  a : 1,\\n  b : 2,\\n};\\nconst update = { ...defaultObject, c : 3};\\n// { a:1,b:2,c:3 } \\n\")), mdx(\"p\", null, \"\\uC804 \\uC8FC\\uC81C\\uC758 \\uC911\\uCCA9\\uB41C \\uAC1D\\uCCB4 \\uBB38\\uC81C\\uB3C4 \\uCC98\\uB9AC\\uAC00\\uB2A5\\uD558\\uB2E4\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const defaultEmployee = {\\n  name : {\\n    first : '', last : '',\\n  },\\n  year : 0,\\n};\\nconst employee = {\\n  ...defaultEmployee,\\n  name : {\\n    ...defaultEmployee.name,\\n  },\\n};\\n\")), mdx(\"hr\", null), mdx(\"h3\", null, \"\\uB9F5\\uC73C\\uB85C \\uBA85\\uD655\\uD558\\uAC8C \\uD0A4-\\uAC12 \\uB370\\uC774\\uD130\\uB97C \\uAC31\\uC2E0\\uD558\\uB77C\"), mdx(\"p\", null, \"\\uD0A4-\\uAC12 \\uB370\\uC774\\uD130\\uAC00 \\uC790\\uC8FC \\uBC14\\uB00C\\uB294 \\uACBD\\uC6B0\\uC5D4 \\uAC1D\\uCCB4\\uAC00 \\uC544\\uB2CC \\uB9F5\\uC744 \\uC774\\uC6A9\\uD55C\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"let filters = new Map() // \\uCCB4\\uC774\\uB2DD\\uC73C\\uB85C \\uC5EC\\uB7EC \\uB370\\uC774\\uD130 \\uCD94\\uAC00\\uD558\\uAE30\\n    .set('\\uACAC\\uC885','\\uB808\\uBE0C\\uB77C\\uB3C4\\uB808\\uD2B8\\uB9AC\\uBC84')\\n    .set('\\uD06C\\uAE30','\\uB300\\uD615\\uACAC')\\n    .set('\\uC0C9\\uC0C1','\\uAC08\\uC0C9');\\nfilters.get('\\uD06C\\uAE30'); // '\\uB300\\uD615\\uACAC'\\n\")), mdx(\"p\", null, \"\\uBC30\\uC5F4\\uD615\\uD0DC\\uB85C\\uB3C4 \\uC0DD\\uC131\\uC774 \\uAC00\\uB2A5\\uD558\\uB2E4\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"let filters = new Map(\\n  [\\n    ['\\uACAC\\uC885','\\uB798\\uBE0C\\uB77C\\uB3C4\\uB808\\uD2B8\\uB9AC\\uBC84'],\\n    ['\\uD06C\\uAE30','\\uB300\\uD615\\uACAC'],\\n    ['\\uC0C9\\uC0C1','\\uAC08\\uC0C9'],\\n  ]\\n)\\nfilters.get('\\uC0C9\\uC0C1'); // '\\uAC08\\uC0C9'\\n\")), mdx(\"p\", null, \"\\uC0AD\\uC81C\\uD560 \\uB54C\\uB294\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"filters.delete('\\uC0C9\\uC0C1');\\n\\nfilters.clear();\\n\")), mdx(\"p\", null, \"\\uAC1D\\uCCB4\\uC758 \\uACBD\\uC6B0 \\uD0A4\\uC5D0 \\uC0AC\\uC6A9\\uD560 \\uC218 \\uC788\\uB294 \\uC790\\uB8CC\\uD615\\uC5D0 \\uC81C\\uC57D\\uC774 \\uC788\\uB2E4.\\n\\uC815\\uC218\\uB97C \\uD0A4\\uB85C \\uC0AC\\uC6A9\\uD560 \\uC218 \\uC5C6\\uB2E4. \\uD0A4\\uB97C \\uC815\\uC218\\uB85C \\uC4F8 \\uB54C\\uB294 Map!!\"), mdx(\"hr\", null), mdx(\"h3\", null, \"\\uB9F5\\uACFC \\uD3BC\\uCE68 \\uC5F0\\uC0B0\\uC790\\uB85C \\uD0A4-\\uAC12 \\uB370\\uC774\\uD130\\uB97C \\uC21C\\uD68C\\uD558\\uB77C\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const filters = {\\n  color : 'black',\\n  type : 'Litriber',\\n};\\n\\nfunction getAppliedFilters(filters) {\\n  const keys = Object.keys(filters);\\n  keys.sort(); // \\uC21C\\uC11C\\uB97C \\uC800\\uC7A5\\uD558\\uC9C0 \\uC54A\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uC815\\uB82C\\uC774 \\uD544\\uC694\\n  const applied = [];\\n  for (const key of keys) {\\n    applied.push(`${key}:${filters[key]}`);\\n  }\\n  return `\\uC120\\uD0DD\\uD55C \\uC870\\uAC74\\uC740 ${applied.join(', ')} \\uC785\\uB2C8\\uB2E4.`;\\n}\\n\")), mdx(\"p\", null, \"\\uAC1D\\uCCB4\\uB97C \\uC21C\\uD68C\\uD558\\uB294 \\uAC83\\uC740 \\uC27D\\uC9C0 \\uC54A\\uB2E4\\uB294 \\uAC83\\uC744 \\uC54C \\uC218 \\uC788\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const filters = new Map()\\n    .set('color', 'black')\\n    .set('type', 'Litriber');\\n\\nfunction checkFilters(filters) {\\n  for (const entry of filters) {\\n    console.log(entry);\\n  }\\n}\\n\")), mdx(\"p\", null, \"Map\\uC744 for...of \\uBC18\\uBCF5\\uBB38\\uC73C\\uB85C \\uC811\\uADFC\\uD558\\uBA74 \\uC774\\uD130\\uB808\\uC774\\uD130\\uB294 \\uD0A4-\\uAC12 \\uC30D\\uC744 \\uB118\\uACA8\\uC900\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"filters.entries();\\n// MapIterator { ['color','black'],['type','Litriber']}\\n\")), mdx(\"p\", null, \"\\uB9F5\\uC740 \\uC21C\\uC11C\\uB97C \\uC800\\uC7A5\\uD55C\\uB2E4. \\uC5B8\\uC81C\\uB098 \\uB9F5\\uC758 \\uCCAB \\uBC88\\uC9F8 \\uD56D\\uBAA9\\uC744 \\uCCAB \\uBC88\\uC9F8\\uB85C \\uBC1B\\uB294\\uB2E4. \\uADF8\\uB7EC\\uB098 \\uBC30\\uC5F4\\uCC98\\uB7FC \\uC815\\uB82C \\uBA54\\uC11C\\uB4DC\\uAC00 \\uB0B4\\uC7A5\\uB418\\uC5B4 \\uC788\\uC9C0 \\uC54A\\uB2E4.\\n\\uADF8 \\uBB38\\uC81C\\uB294 \\uD3BC\\uCE68\\uC5F0\\uC0B0\\uC790\\uB97C \\uD1B5\\uD574 \\uD574\\uACB0\\uD55C\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"function sortByKey(a,b){\\n  return a[0] > b[0] ? 1: -1;\\n}\\nfunction getSortedAppliedFilters(filters) {\\n  const applied = [];\\n  for (const [key,value] of [...filters].sort(sortByKey)) {\\n    applied.push(`${key}:${value}`);\\n  }\\n  return `\\uC120\\uD0DD\\uD55C \\uC870\\uAC74\\uC740 ${applied.join(', ')} \\uC785\\uB2C8\\uB2E4.`;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"function getSortedAppliedFilters(filters) {\\n  const applied = [...filters]\\n    .sort(sortByKey)\\n    .map(([key,value]) => {\\n      return `${key}:${value}`;\\n    })\\n    .join(', ');\\n  return `\\uC120\\uD0DD\\uD55C \\uC870\\uAC74\\uC740 ${applied} \\uC785\\uB2C8\\uB2E4.`;\\n}\\n\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uB9F5\\uC744 \\uBC30\\uC5F4\\uB85C \\uBCC0\\uD658\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uBC30\\uC5F4\\uC744 \\uC815\\uB82C\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uBC30\\uC5F4\\uC5D0 \\uB2F4\\uAE34 \\uD0A4-\\uAC12 \\uC30D\\uC744 '\\uD0A4:\\uAC12' \\uD615\\uC2DD\\uC758 \\uBB38\\uC790\\uC5F4\\uB85C \\uBC18\\uD658\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uBC30\\uC5F4\\uC758 \\uD56D\\uBAA9\\uC5D0 \\uC5F4\\uACB0\\uD574\\uC11C \\uBB38\\uC790\\uC5F4\\uC744 \\uB9CC\\uB4EC\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uD15C\\uD50C\\uB9BF \\uB9AC\\uD130\\uB7F4\\uC744 \\uC774\\uC6A9\\uD574\\uC11C \\uB2E4\\uB978 \\uC815\\uBCF4\\uC640 \\uD568\\uAED8 \\uBB38\\uC790\\uC5F4\\uB85C \\uBCD1\\uD569\")), mdx(\"hr\", null), mdx(\"h3\", null, \"\\uB9F5 \\uC0DD\\uC131 \\uC2DC \\uBD80\\uC218\\uD6A8\\uACFC\\uB97C \\uD53C\\uD558\\uB77C\"), mdx(\"hr\", null), mdx(\"h3\", null, \"\\uC138\\uD2B8\\uB97C \\uC774\\uC6A9\\uD574 \\uACE0\\uC720\\uAC12\\uC744 \\uAD00\\uB9AC\\uD558\\uB77C\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"function getUnique(attributes) {\\n  return [...new Set(attributes)];\\n}\\n\")), mdx(\"p\", null, \"Set\\uC740 \\uC911\\uBCF5\\uC744 \\uC81C\\uAC70\\uD558\\uACE0 \\uC800\\uC7A5\\uD568\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"<자바스크립트 코딩의 기술> ch3\",\n  \"date\": \"2020-08-02T00:00:00.000Z\",\n  \"tags\": [\"JS\"]\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h3>{`객체를 이용해 정적인 키-값을 탐색하라`}</h3>\n    <p>{`객체는 변호가 없고 구조화된 키-값 데이터를 다루는 경우에 유용하다.\n반면 자주 갱신되거나 실행되기 전에는 알 수 없는 동적인 정보를 다루기에는 적합하지 않다`}</p>\n    <p>{`객체는 정보의 경로를 알고 있을 떄 적절한 방법`}</p>\n    <hr></hr>\n    <h3>{`Object.assign( )으로 조작 없이 객체를 생성하라`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const o = {a:1, b:1};\nconst base = {};\nconst clone = Object.assign(base,o);\n// base == {a:1, b:1} == clone\n`}</code></pre>\n    <p>{`assign( )을 이용하면 원본 객체를 조작한다.`}</p>\n    <p>{`그럴땐`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const base2 = {};\nconst clone2 = Object.assign({},base,o);\n// base2 == {}\n// clone2 == {a:1, b:1}\n`}</code></pre>\n    <p>{`객체가 중첩될 경우 문제가 발생한다. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const defaultEmployee = {\n  name : {\n    first : '', last : '',\n  },\n  year : 0,\n};\nconst employee = Object.assign({},defaultEmployee);\nemployee.name.first = 'tom';\nconsole.log(defaultEmployee.name.first); // 'tom'\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`year`}</inlineCode>{` 의 경우 잘 복사되지만, `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` 의 경우 객체의 참조 주소만 복사하기 때문에 원본, 복사본 모두 중첩된 객체의 값이 변경된다.`}</p>\n    <p>{`객체의 중첩은 안쓰는게 제일 좋지만 불가피한 경우가 있다.\n그럴땐`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const employee2 = Object.assign(\n    {},\n  defaultEmployee,\n  {\n    name: Object.assign({},defaultEmployee.name),\n  },\n);\nexport {default};\n`}</code></pre>\n    <h3>{`객체 펼침 연산자로 정보를 갱신하라`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const defaultObject = {\n  a : 1,\n  b : 2,\n};\nconst update = { ...defaultObject, c : 3};\n// { a:1,b:2,c:3 } \n`}</code></pre>\n    <p>{`전 주제의 중첩된 객체 문제도 처리가능하다`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const defaultEmployee = {\n  name : {\n    first : '', last : '',\n  },\n  year : 0,\n};\nconst employee = {\n  ...defaultEmployee,\n  name : {\n    ...defaultEmployee.name,\n  },\n};\n`}</code></pre>\n    <hr></hr>\n    <h3>{`맵으로 명확하게 키-값 데이터를 갱신하라`}</h3>\n    <p>{`키-값 데이터가 자주 바뀌는 경우엔 객체가 아닌 맵을 이용한다.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let filters = new Map() // 체이닝으로 여러 데이터 추가하기\n    .set('견종','레브라도레트리버')\n    .set('크기','대형견')\n    .set('색상','갈색');\nfilters.get('크기'); // '대형견'\n`}</code></pre>\n    <p>{`배열형태로도 생성이 가능하다`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let filters = new Map(\n  [\n    ['견종','래브라도레트리버'],\n    ['크기','대형견'],\n    ['색상','갈색'],\n  ]\n)\nfilters.get('색상'); // '갈색'\n`}</code></pre>\n    <p>{`삭제할 때는`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`filters.delete('색상');\n\nfilters.clear();\n`}</code></pre>\n    <p>{`객체의 경우 키에 사용할 수 있는 자료형에 제약이 있다.\n정수를 키로 사용할 수 없다. 키를 정수로 쓸 때는 Map!!`}</p>\n    <hr></hr>\n    <h3>{`맵과 펼침 연산자로 키-값 데이터를 순회하라`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const filters = {\n  color : 'black',\n  type : 'Litriber',\n};\n\nfunction getAppliedFilters(filters) {\n  const keys = Object.keys(filters);\n  keys.sort(); // 순서를 저장하지 않기 때문에 정렬이 필요\n  const applied = [];\n  for (const key of keys) {\n    applied.push(\\`\\${key}:\\${filters[key]}\\`);\n  }\n  return \\`선택한 조건은 \\${applied.join(', ')} 입니다.\\`;\n}\n`}</code></pre>\n    <p>{`객체를 순회하는 것은 쉽지 않다는 것을 알 수 있다.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const filters = new Map()\n    .set('color', 'black')\n    .set('type', 'Litriber');\n\nfunction checkFilters(filters) {\n  for (const entry of filters) {\n    console.log(entry);\n  }\n}\n`}</code></pre>\n    <p>{`Map을 for...of 반복문으로 접근하면 이터레이터는 키-값 쌍을 넘겨준다.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`filters.entries();\n// MapIterator { ['color','black'],['type','Litriber']}\n`}</code></pre>\n    <p>{`맵은 순서를 저장한다. 언제나 맵의 첫 번째 항목을 첫 번째로 받는다. 그러나 배열처럼 정렬 메서드가 내장되어 있지 않다.\n그 문제는 펼침연산자를 통해 해결한다.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function sortByKey(a,b){\n  return a[0] > b[0] ? 1: -1;\n}\nfunction getSortedAppliedFilters(filters) {\n  const applied = [];\n  for (const [key,value] of [...filters].sort(sortByKey)) {\n    applied.push(\\`\\${key}:\\${value}\\`);\n  }\n  return \\`선택한 조건은 \\${applied.join(', ')} 입니다.\\`;\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function getSortedAppliedFilters(filters) {\n  const applied = [...filters]\n    .sort(sortByKey)\n    .map(([key,value]) => {\n      return \\`\\${key}:\\${value}\\`;\n    })\n    .join(', ');\n  return \\`선택한 조건은 \\${applied} 입니다.\\`;\n}\n`}</code></pre>\n    <ol>\n      <li parentName=\"ol\">{`맵을 배열로 변환`}</li>\n      <li parentName=\"ol\">{`배열을 정렬`}</li>\n      <li parentName=\"ol\">{`배열에 담긴 키-값 쌍을 '키:값' 형식의 문자열로 반환`}</li>\n      <li parentName=\"ol\">{`배열의 항목에 열결해서 문자열을 만듬`}</li>\n      <li parentName=\"ol\">{`템플릿 리터럴을 이용해서 다른 정보와 함께 문자열로 병합`}</li>\n    </ol>\n    <hr></hr>\n    <h3>{`맵 생성 시 부수효과를 피하라`}</h3>\n    <hr></hr>\n    <h3>{`세트를 이용해 고유값을 관리하라`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function getUnique(attributes) {\n  return [...new Set(attributes)];\n}\n`}</code></pre>\n    <p>{`Set은 중복을 제거하고 저장함`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}