{"expireTime":9007200852998737000,"key":"gatsby-plugin-mdx-entire-payload-11ff89445460acfce7c3a22a563cdefe-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":3,"children":[{"type":"text","value":"상속","position":{"start":{"line":2,"column":5,"offset":5},"end":{"line":2,"column":7,"offset":7},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":7,"offset":7},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"스위프트의 상속은 클래스, 프로토콜에서 가능","position":{"start":{"line":4,"column":3,"offset":11},"end":{"line":4,"column":27,"offset":35},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":11},"end":{"line":4,"column":27,"offset":35},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":9},"end":{"line":4,"column":27,"offset":35},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"다중 상속 불가","position":{"start":{"line":5,"column":3,"offset":38},"end":{"line":5,"column":11,"offset":46},"indent":[]}}],"position":{"start":{"line":5,"column":3,"offset":38},"end":{"line":5,"column":11,"offset":46},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":36},"end":{"line":5,"column":11,"offset":46},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":9},"end":{"line":5,"column":11,"offset":46},"indent":[1]}},{"type":"code","lang":"swift","meta":null,"value":"class 이름: 부모클래스 이름 {\n  ...\n}","position":{"start":{"line":7,"column":1,"offset":48},"end":{"line":11,"column":4,"offset":89},"indent":[1,1,1,1]}},{"type":"code","lang":"swift","meta":null,"value":"class Person {\n  var name: String = \"\"\n  \n  func selfIntroduce() {\n    print(\"저는 \\(name)입니다\")\n  }\n  \n  final func sayHello() {\n    print(\"Hello\")\n  }\n  // final 키워드를 통해 자식클래스에서 재정의 불가\n  \n  // 타입 메서드 - 재정의 불가\n  static func typeMethod() {\n    print(\"type method - static\")\n  }\n  // 재정의 가능 메서드\n  class func classMethod() {\n    print(\"type method - class\")\n  }\n  // final class라고 표현하면 static과 동일\n}\n\nclass Student: Person {\n  var major: String = \"\"\n  \n  override func selfIntroduce() {\n    print(\"저는 \\(name)이고, 전공은 \\(major)입니다\")\n  }\n  \n  override class func classMethod() {\n    print(\"overriden type method - class\")\n  }\n}","position":{"start":{"line":13,"column":1,"offset":91},"end":{"line":48,"column":4,"offset":721},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"인스턴스의 생성과 소멸","position":{"start":{"line":50,"column":5,"offset":727},"end":{"line":50,"column":17,"offset":739},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":723},"end":{"line":50,"column":17,"offset":739},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"이니셜라이저","position":{"start":{"line":52,"column":6,"offset":746},"end":{"line":52,"column":12,"offset":752},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":741},"end":{"line":52,"column":12,"offset":752},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"스위프트의 모든 인스턴스는 초기화와 동시에 모든 프로퍼티에 유효한 값이 할당되어 있어야 함. 프로퍼티에 미리 기본값을 할당해두면 인스턴스가 생성됨과 동시에 초기값을 지니게 됨","position":{"start":{"line":54,"column":1,"offset":754},"end":{"line":54,"column":98,"offset":851},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":754},"end":{"line":54,"column":98,"offset":851},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"기본값 지정이 어려운 경우 이니셜라이저를 통해 초기값 전달 가능","position":{"start":{"line":56,"column":1,"offset":853},"end":{"line":56,"column":36,"offset":888},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":853},"end":{"line":56,"column":36,"offset":888},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"class Person {\n  var name: String\n  var age: Int\n  var nickName: String?\n  \n  convenience init(name: String, age:Int, nickName: String){\n    //self.name = name\n    //self.age = age\n    // 자기 자신의 이니셜라이저 호출 가능\n    self.init(name: name, age: age)\n    self.nickName = nickName\n  }\n  \n  // 기본값 설정이 꼭 필요하지 않다면 옵셔널을 활용\n  init(name: String, age:Int) {\n    self.name = name\n    self.age = age\n  }\n}\n\nlet hana: Person = Person(name: \"hana\", age: 20, nickName: \"하나\")","position":{"start":{"line":58,"column":1,"offset":890},"end":{"line":80,"column":4,"offset":1358},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"실패 가능한 이니셜라이저","position":{"start":{"line":82,"column":3,"offset":1362},"end":{"line":82,"column":16,"offset":1375},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":1360},"end":{"line":82,"column":18,"offset":1377},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":1360},"end":{"line":82,"column":18,"offset":1377},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"class Person2 {\n  var name: String\n  var age: Int\n  var nickName: String?\n  \n  init?(name: String, age: Int) {\n    if (0...120).contains(age) == false {\n      return nil\n    }\n    if name.characters.count == 0 {\n      return nil\n    }\n    \n    self.name = name\n    self.age = age\n  }\n}\n\nlet john: Person2? = Person2(name:\"john\", age:23)","position":{"start":{"line":84,"column":1,"offset":1379},"end":{"line":104,"column":4,"offset":1728},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"디이니셜라이저","position":{"start":{"line":106,"column":6,"offset":1735},"end":{"line":106,"column":13,"offset":1742},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":1730},"end":{"line":106,"column":13,"offset":1742},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"클래스의 인스턴스가 메모리에서 해제되는 시점에 호출","position":{"start":{"line":108,"column":1,"offset":1744},"end":{"line":108,"column":29,"offset":1772},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":1744},"end":{"line":108,"column":29,"offset":1772},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"class Person3 {\n  var name: String\n  var age: Int\n  \n  init(name: String, age:Int) {\n    self.name = name\n    self.age = age\n  }\n  deinit {\n    ...\n  }\n}","position":{"start":{"line":110,"column":1,"offset":1774},"end":{"line":123,"column":4,"offset":1940},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"옵셔널 체이닝","position":{"start":{"line":127,"column":5,"offset":1948},"end":{"line":127,"column":12,"offset":1955},"indent":[]}}],"position":{"start":{"line":127,"column":1,"offset":1944},"end":{"line":127,"column":12,"offset":1955},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"옵셔널 요소 내부의 프로퍼티로 또다시 옵셔널이 연속적으로 연결되는 경우 유용하게 사용","position":{"start":{"line":129,"column":1,"offset":1957},"end":{"line":129,"column":48,"offset":2004},"indent":[]}}],"position":{"start":{"line":129,"column":1,"offset":1957},"end":{"line":129,"column":48,"offset":2004},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"class Person {\n  var name: String\n  var job: String?\n  var home: Apartment?\n  \n  init(name: String){\n    self.name = name\n  }\n}\n\nclass Apartment {\n  var buildingNumber: String\n  var roomNumber: String\n  var `guard`: Person?\n  var owner: Person?\n  \n  init(dong: String, ho: String) {\n    buildingNumber = dong\n    roomNumber = ho\n  }\n}\n\nfunc guardJobWithOptionalChaining(owner: Person?) {\n  if let guardJob = owner?.home?.guard?.job {\n    print(\"우리집 경비원의 직업은 \\(guardJob)입니다\")\n  } else {\n    print(\"우리집 경비원은 직업이 없어요\")\n  }\n}","position":{"start":{"line":131,"column":1,"offset":2006},"end":{"line":161,"column":4,"offset":2540},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"nil 병합 연산자","position":{"start":{"line":163,"column":6,"offset":2547},"end":{"line":163,"column":16,"offset":2557},"indent":[]}}],"position":{"start":{"line":163,"column":1,"offset":2542},"end":{"line":163,"column":16,"offset":2557},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"var guardJob: String\n\n// x ?? y : x가 nil이라면 y를 할당하라\nguardJob = yagom?.home?.guard?.job ?? \"슈퍼맨\"\nprint(guardJob) // 슈퍼맨","position":{"start":{"line":165,"column":1,"offset":2559},"end":{"line":171,"column":4,"offset":2690},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"타입캐스팅","position":{"start":{"line":175,"column":5,"offset":2698},"end":{"line":175,"column":10,"offset":2703},"indent":[]}}],"position":{"start":{"line":175,"column":1,"offset":2694},"end":{"line":175,"column":10,"offset":2703},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"스위프트의 타입캐스팅은 인스턴스의 타입을 확인하는 용도 또는 클래스의 인스턴스를 부모 혹은 자식 클래스 타입으로 사용할 수 있는지 확인하는 용도로 사용","position":{"start":{"line":177,"column":1,"offset":2705},"end":{"line":177,"column":85,"offset":2789},"indent":[]}}],"position":{"start":{"line":177,"column":1,"offset":2705},"end":{"line":177,"column":85,"offset":2789},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"is","position":{"start":{"line":179,"column":1,"offset":2791},"end":{"line":179,"column":5,"offset":2795},"indent":[]}},{"type":"text","value":" , ","position":{"start":{"line":179,"column":5,"offset":2795},"end":{"line":179,"column":8,"offset":2798},"indent":[]}},{"type":"inlineCode","value":"as","position":{"start":{"line":179,"column":8,"offset":2798},"end":{"line":179,"column":12,"offset":2802},"indent":[]}},{"type":"text","value":" 를 사용","position":{"start":{"line":179,"column":12,"offset":2802},"end":{"line":179,"column":17,"offset":2807},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":2791},"end":{"line":179,"column":17,"offset":2807},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"class Person {\n  ...\n}\nclass Student: Person {\n  ...\n}\nclass UnivStudent: Student {\n  ...\n}\n\nvar me: Person = Person()\nvar hana: Student = Student()\nvar jason: UnivStudent = UnivStudent()\n\nvar result: Bool\n\nresult = me is Person // true\nresult = me is Student // false\nresult = me is UnivStudent // false\n\nresult = hana is Person // true\nresult = hana is Student // true\nresult = hana is UnivStudent // false\n\nresult = jason is Person // true\nresult = jason is Student // true\nresult = jason is UnivStudent // true","position":{"start":{"line":181,"column":1,"offset":2809},"end":{"line":209,"column":4,"offset":3336},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"업캐스팅","position":{"start":{"line":211,"column":6,"offset":3343},"end":{"line":211,"column":10,"offset":3347},"indent":[]}}],"position":{"start":{"line":211,"column":1,"offset":3338},"end":{"line":211,"column":10,"offset":3347},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"as","position":{"start":{"line":213,"column":3,"offset":3351},"end":{"line":213,"column":7,"offset":3355},"indent":[]}},{"type":"text","value":" 를 사용하여 부모클래스의 인스턴스로 사용할 수 있도록 컴파일러에게 타입정보를 전환해줌","position":{"start":{"line":213,"column":7,"offset":3355},"end":{"line":213,"column":55,"offset":3403},"indent":[]}}],"position":{"start":{"line":213,"column":3,"offset":3351},"end":{"line":213,"column":55,"offset":3403},"indent":[]}}],"position":{"start":{"line":213,"column":1,"offset":3349},"end":{"line":213,"column":55,"offset":3403},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"Any","position":{"start":{"line":214,"column":3,"offset":3406},"end":{"line":214,"column":8,"offset":3411},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":214,"column":8,"offset":3411},"end":{"line":214,"column":10,"offset":3413},"indent":[]}},{"type":"inlineCode","value":"AnyObject","position":{"start":{"line":214,"column":10,"offset":3413},"end":{"line":214,"column":21,"offset":3424},"indent":[]}},{"type":"text","value":"로도 타입정보를 변환할 수 있음","position":{"start":{"line":214,"column":21,"offset":3424},"end":{"line":214,"column":38,"offset":3441},"indent":[]}}],"position":{"start":{"line":214,"column":3,"offset":3406},"end":{"line":214,"column":38,"offset":3441},"indent":[]}}],"position":{"start":{"line":214,"column":1,"offset":3404},"end":{"line":214,"column":38,"offset":3441},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"암시적으로 처리되므로 생략가능","position":{"start":{"line":215,"column":3,"offset":3444},"end":{"line":215,"column":19,"offset":3460},"indent":[]}}],"position":{"start":{"line":215,"column":3,"offset":3444},"end":{"line":215,"column":19,"offset":3460},"indent":[]}}],"position":{"start":{"line":215,"column":1,"offset":3442},"end":{"line":215,"column":19,"offset":3460},"indent":[]}}],"position":{"start":{"line":213,"column":1,"offset":3349},"end":{"line":215,"column":19,"offset":3460},"indent":[1,1]}},{"type":"code","lang":"swift","meta":null,"value":"var mike: Person = UnivStudent() as Person\nvar jenny: Student = Student()\nvar jina: Any = Person()","position":{"start":{"line":217,"column":1,"offset":3462},"end":{"line":221,"column":4,"offset":3573},"indent":[1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"다운캐스팅","position":{"start":{"line":223,"column":6,"offset":3580},"end":{"line":223,"column":11,"offset":3585},"indent":[]}}],"position":{"start":{"line":223,"column":1,"offset":3575},"end":{"line":223,"column":11,"offset":3585},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"자식 클래스의 인스턴스로 사용할 수 있도록 타입정보 전화","position":{"start":{"line":225,"column":3,"offset":3589},"end":{"line":225,"column":34,"offset":3620},"indent":[]}}],"position":{"start":{"line":225,"column":3,"offset":3589},"end":{"line":225,"column":34,"offset":3620},"indent":[]}}],"position":{"start":{"line":225,"column":1,"offset":3587},"end":{"line":225,"column":34,"offset":3620},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"as?","position":{"start":{"line":226,"column":3,"offset":3623},"end":{"line":226,"column":8,"offset":3628},"indent":[]}},{"type":"text","value":" 조건부 다운 캐스팅","position":{"start":{"line":226,"column":8,"offset":3628},"end":{"line":226,"column":19,"offset":3639},"indent":[]}}],"position":{"start":{"line":226,"column":3,"offset":3623},"end":{"line":226,"column":19,"offset":3639},"indent":[]}}],"position":{"start":{"line":226,"column":1,"offset":3621},"end":{"line":226,"column":19,"offset":3639},"indent":[]}}],"position":{"start":{"line":225,"column":1,"offset":3587},"end":{"line":226,"column":19,"offset":3639},"indent":[1]}},{"type":"code","lang":"swift","meta":null,"value":"var optionalCasted: Student?\n\noptionalCasted = mike as? UnivStudent \noptionalCasted = jenny as? UnivStudent // nil\noptionalCasted = jina as? UnivStudent // nil\noptionalCasted = jina as? Student // nil","position":{"start":{"line":228,"column":1,"offset":3641},"end":{"line":235,"column":4,"offset":3854},"indent":[1,1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"as!","position":{"start":{"line":237,"column":3,"offset":3858},"end":{"line":237,"column":8,"offset":3863},"indent":[]}},{"type":"text","value":" 강제 다운 캐스팅","position":{"start":{"line":237,"column":8,"offset":3863},"end":{"line":237,"column":18,"offset":3873},"indent":[]}}],"position":{"start":{"line":237,"column":3,"offset":3858},"end":{"line":237,"column":18,"offset":3873},"indent":[]}}],"position":{"start":{"line":237,"column":1,"offset":3856},"end":{"line":237,"column":18,"offset":3873},"indent":[]}}],"position":{"start":{"line":237,"column":1,"offset":3856},"end":{"line":237,"column":18,"offset":3873},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"var forcedCasted: Student\n\nforcedCasted = mike as! UnivStudent\nforcedCasted = jenny as? UnivStudent // error\nforcedCasted = jina as? UnivStudent // error\nforcedCasted = jina as? Student // erro","position":{"start":{"line":239,"column":1,"offset":3875},"end":{"line":246,"column":4,"offset":4081},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"assert와 guard","position":{"start":{"line":250,"column":5,"offset":4089},"end":{"line":250,"column":18,"offset":4102},"indent":[]}}],"position":{"start":{"line":250,"column":1,"offset":4085},"end":{"line":250,"column":18,"offset":4102},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"애플리케이션이 동작 도중에 생성하는 다양한 결과값을 동적으로 확인하고 안전하게 처리할 수 있도록 도와줌","position":{"start":{"line":252,"column":1,"offset":4104},"end":{"line":252,"column":58,"offset":4161},"indent":[]}}],"position":{"start":{"line":252,"column":1,"offset":4104},"end":{"line":252,"column":58,"offset":4161},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"assertion","position":{"start":{"line":254,"column":6,"offset":4168},"end":{"line":254,"column":15,"offset":4177},"indent":[]}}],"position":{"start":{"line":254,"column":1,"offset":4163},"end":{"line":254,"column":15,"offset":4177},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"assert(_: _: file : line: )","position":{"start":{"line":256,"column":3,"offset":4181},"end":{"line":256,"column":32,"offset":4210},"indent":[]}},{"type":"text","value":" 함수를 사용","position":{"start":{"line":256,"column":32,"offset":4210},"end":{"line":256,"column":39,"offset":4217},"indent":[]}}],"position":{"start":{"line":256,"column":3,"offset":4181},"end":{"line":256,"column":39,"offset":4217},"indent":[]}}],"position":{"start":{"line":256,"column":1,"offset":4179},"end":{"line":256,"column":39,"offset":4217},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"디버깅 모드에서만 동작","position":{"start":{"line":257,"column":3,"offset":4220},"end":{"line":257,"column":15,"offset":4232},"indent":[]}}],"position":{"start":{"line":257,"column":3,"offset":4220},"end":{"line":257,"column":15,"offset":4232},"indent":[]}}],"position":{"start":{"line":257,"column":1,"offset":4218},"end":{"line":257,"column":15,"offset":4232},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"배포하는 애플리케이션에서는 제외됨","position":{"start":{"line":258,"column":3,"offset":4235},"end":{"line":258,"column":21,"offset":4253},"indent":[]}}],"position":{"start":{"line":258,"column":3,"offset":4235},"end":{"line":258,"column":21,"offset":4253},"indent":[]}}],"position":{"start":{"line":258,"column":1,"offset":4233},"end":{"line":258,"column":21,"offset":4253},"indent":[]}}],"position":{"start":{"line":256,"column":1,"offset":4179},"end":{"line":258,"column":21,"offset":4253},"indent":[1,1]}},{"type":"code","lang":"swift","meta":null,"value":"var someInt: Int = 0\n\nassert(someInt == 0, \"someInt != 0\")\n\nsomeInt = 1\n// 동작 중지, 검증 실패\n// assertion failed: someInt != 0: ...","position":{"start":{"line":260,"column":1,"offset":4255},"end":{"line":268,"column":4,"offset":4394},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Early Exit","position":{"start":{"line":270,"column":6,"offset":4401},"end":{"line":270,"column":16,"offset":4411},"indent":[]}}],"position":{"start":{"line":270,"column":1,"offset":4396},"end":{"line":270,"column":16,"offset":4411},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"guard","position":{"start":{"line":272,"column":3,"offset":4415},"end":{"line":272,"column":10,"offset":4422},"indent":[]}},{"type":"text","value":" 를 사용하여 잘못된 값의 전달 시 특정 실행구문을 빠르게 종료","position":{"start":{"line":272,"column":10,"offset":4422},"end":{"line":272,"column":45,"offset":4457},"indent":[]}}],"position":{"start":{"line":272,"column":3,"offset":4415},"end":{"line":272,"column":45,"offset":4457},"indent":[]}}],"position":{"start":{"line":272,"column":1,"offset":4413},"end":{"line":272,"column":45,"offset":4457},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"디버깅모드 뿐만 아니라 어떤 조건에서도 동작","position":{"start":{"line":273,"column":3,"offset":4460},"end":{"line":273,"column":27,"offset":4484},"indent":[]}}],"position":{"start":{"line":273,"column":3,"offset":4460},"end":{"line":273,"column":27,"offset":4484},"indent":[]}}],"position":{"start":{"line":273,"column":1,"offset":4458},"end":{"line":273,"column":27,"offset":4484},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"else","position":{"start":{"line":274,"column":3,"offset":4487},"end":{"line":274,"column":9,"offset":4493},"indent":[]}},{"type":"text","value":" 블록에는 종료 지시어가 반드시 있어야 함","position":{"start":{"line":274,"column":9,"offset":4493},"end":{"line":274,"column":32,"offset":4516},"indent":[]}}],"position":{"start":{"line":274,"column":3,"offset":4487},"end":{"line":274,"column":32,"offset":4516},"indent":[]}}],"position":{"start":{"line":274,"column":1,"offset":4485},"end":{"line":274,"column":32,"offset":4516},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"옵셔널과 함께 많이 쓰인다.","position":{"start":{"line":275,"column":3,"offset":4519},"end":{"line":275,"column":18,"offset":4534},"indent":[]}}],"position":{"start":{"line":275,"column":3,"offset":4519},"end":{"line":275,"column":18,"offset":4534},"indent":[]}}],"position":{"start":{"line":275,"column":1,"offset":4517},"end":{"line":275,"column":18,"offset":4534},"indent":[]}}],"position":{"start":{"line":272,"column":1,"offset":4413},"end":{"line":275,"column":18,"offset":4534},"indent":[1,1,1]}},{"type":"code","lang":"swift","meta":null,"value":"func functionWithGuard(age: Int?) {\n\tguard let unwrappedAge = age,\n  \tunwrappedAge < 130, unwrappedAge >=0 else {\n      print(\"나이값 입력이 잘못되었습니다\")\n      return \n    }\n  \n  print(\"당신의 나이는 \\(unwrappedAge)세 입니다\")\n}","position":{"start":{"line":277,"column":1,"offset":4536},"end":{"line":287,"column":4,"offset":4758},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"프로토콜","position":{"start":{"line":291,"column":5,"offset":4766},"end":{"line":291,"column":9,"offset":4770},"indent":[]}}],"position":{"start":{"line":291,"column":1,"offset":4762},"end":{"line":291,"column":9,"offset":4770},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"프로토콜은 특정 역할을 수행하기 위한 메서드, 프로퍼티, 이니셜라이저 등의 요구사항을 정의","position":{"start":{"line":293,"column":3,"offset":4774},"end":{"line":293,"column":53,"offset":4824},"indent":[]}}],"position":{"start":{"line":293,"column":3,"offset":4774},"end":{"line":293,"column":53,"offset":4824},"indent":[]}}],"position":{"start":{"line":293,"column":1,"offset":4772},"end":{"line":293,"column":53,"offset":4824},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"구조체, 클래스, 열거형은 프로토콜을 채택해서 프로토콜의 요구사항을 실제로 구현할 수 있음","position":{"start":{"line":294,"column":3,"offset":4827},"end":{"line":294,"column":53,"offset":4877},"indent":[]}}],"position":{"start":{"line":294,"column":3,"offset":4827},"end":{"line":294,"column":53,"offset":4877},"indent":[]}}],"position":{"start":{"line":294,"column":1,"offset":4825},"end":{"line":294,"column":53,"offset":4877},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"자바의 인터페이스 느낌인듯..","position":{"start":{"line":295,"column":3,"offset":4880},"end":{"line":295,"column":19,"offset":4896},"indent":[]}}],"position":{"start":{"line":295,"column":3,"offset":4880},"end":{"line":295,"column":19,"offset":4896},"indent":[]}}],"position":{"start":{"line":295,"column":1,"offset":4878},"end":{"line":295,"column":19,"offset":4896},"indent":[]}}],"position":{"start":{"line":293,"column":1,"offset":4772},"end":{"line":295,"column":19,"offset":4896},"indent":[1,1]}},{"type":"code","lang":"swift","meta":null,"value":"protocol 이름 {\n  ...\n}","position":{"start":{"line":297,"column":1,"offset":4898},"end":{"line":301,"column":4,"offset":4932},"indent":[1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"상속도 가능. 다중상속 가능","position":{"start":{"line":303,"column":3,"offset":4936},"end":{"line":303,"column":18,"offset":4951},"indent":[]}}],"position":{"start":{"line":303,"column":3,"offset":4936},"end":{"line":303,"column":18,"offset":4951},"indent":[]}}],"position":{"start":{"line":303,"column":1,"offset":4934},"end":{"line":303,"column":18,"offset":4951},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"is","position":{"start":{"line":304,"column":3,"offset":4954},"end":{"line":304,"column":7,"offset":4958},"indent":[]}},{"type":"text","value":" , ","position":{"start":{"line":304,"column":7,"offset":4958},"end":{"line":304,"column":10,"offset":4961},"indent":[]}},{"type":"inlineCode","value":"as","position":{"start":{"line":304,"column":10,"offset":4961},"end":{"line":304,"column":14,"offset":4965},"indent":[]}},{"type":"text","value":" 키워드 사용 가능","position":{"start":{"line":304,"column":14,"offset":4965},"end":{"line":304,"column":24,"offset":4975},"indent":[]}}],"position":{"start":{"line":304,"column":3,"offset":4954},"end":{"line":304,"column":24,"offset":4975},"indent":[]}}],"position":{"start":{"line":304,"column":1,"offset":4952},"end":{"line":304,"column":24,"offset":4975},"indent":[]}}],"position":{"start":{"line":303,"column":1,"offset":4934},"end":{"line":304,"column":24,"offset":4975},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"익스텐션","position":{"start":{"line":306,"column":5,"offset":4981},"end":{"line":306,"column":9,"offset":4985},"indent":[]}}],"position":{"start":{"line":306,"column":1,"offset":4977},"end":{"line":306,"column":9,"offset":4985},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"여러타입에 새로운 기능을 추가할 수 있는 기능","position":{"start":{"line":308,"column":3,"offset":4989},"end":{"line":308,"column":28,"offset":5014},"indent":[]}}],"position":{"start":{"line":308,"column":3,"offset":4989},"end":{"line":308,"column":28,"offset":5014},"indent":[]}}],"position":{"start":{"line":308,"column":1,"offset":4987},"end":{"line":308,"column":28,"offset":5014},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"연산 프로퍼티, 타입 메서드, 이니셜라이저, 서브스크립트, 중첩타입, 특정 프로토콜 등을 추가 가능","position":{"start":{"line":309,"column":3,"offset":5017},"end":{"line":309,"column":58,"offset":5072},"indent":[]}}],"position":{"start":{"line":309,"column":3,"offset":5017},"end":{"line":309,"column":58,"offset":5072},"indent":[]}}],"position":{"start":{"line":309,"column":1,"offset":5015},"end":{"line":309,"column":58,"offset":5072},"indent":[]}}],"position":{"start":{"line":308,"column":1,"offset":4987},"end":{"line":309,"column":58,"offset":5072},"indent":[1]}},{"type":"code","lang":"swift","meta":null,"value":"extension 확장할 타입 {\n  ...\n}\nextension 확장할 타입 : 프로토콜1, 프로토콜2 {\n  ...\n}","position":{"start":{"line":311,"column":1,"offset":5074},"end":{"line":318,"column":4,"offset":5155},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"오류처리","position":{"start":{"line":322,"column":5,"offset":5163},"end":{"line":322,"column":9,"offset":5167},"indent":[]}}],"position":{"start":{"line":322,"column":1,"offset":5159},"end":{"line":322,"column":9,"offset":5167},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"오류표현 방법은 Error 프로토콜과 열거형을 통해서 오류를 표현","position":{"start":{"line":324,"column":1,"offset":5169},"end":{"line":324,"column":37,"offset":5205},"indent":[]}}],"position":{"start":{"line":324,"column":1,"offset":5169},"end":{"line":324,"column":37,"offset":5205},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"enum 오류종류이름: Error {\n  case 종류1\n  case 종류2\n}","position":{"start":{"line":326,"column":1,"offset":5207},"end":{"line":331,"column":4,"offset":5264},"indent":[1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"오류가 발생할 가능성이 있는 부분에 ","position":{"start":{"line":333,"column":3,"offset":5268},"end":{"line":333,"column":23,"offset":5288},"indent":[]}},{"type":"inlineCode","value":"throw","position":{"start":{"line":333,"column":23,"offset":5288},"end":{"line":333,"column":30,"offset":5295},"indent":[]}},{"type":"text","value":" 키워드를 추가","position":{"start":{"line":333,"column":30,"offset":5295},"end":{"line":333,"column":38,"offset":5303},"indent":[]}}],"position":{"start":{"line":333,"column":3,"offset":5268},"end":{"line":333,"column":38,"offset":5303},"indent":[]}}],"position":{"start":{"line":333,"column":1,"offset":5266},"end":{"line":334,"column":1,"offset":5304},"indent":[1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"try","position":{"start":{"line":335,"column":3,"offset":5307},"end":{"line":335,"column":8,"offset":5312},"indent":[]}},{"type":"text","value":" 를 사용하여 호출","position":{"start":{"line":335,"column":8,"offset":5312},"end":{"line":335,"column":18,"offset":5322},"indent":[]}}],"position":{"start":{"line":335,"column":3,"offset":5307},"end":{"line":335,"column":18,"offset":5322},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Do-catch","position":{"start":{"line":337,"column":5,"offset":5328},"end":{"line":337,"column":13,"offset":5336},"indent":[]}}],"position":{"start":{"line":337,"column":5,"offset":5328},"end":{"line":337,"column":13,"offset":5336},"indent":[]}}],"position":{"start":{"line":337,"column":3,"offset":5326},"end":{"line":337,"column":13,"offset":5336},"indent":[]}}],"position":{"start":{"line":337,"column":3,"offset":5326},"end":{"line":337,"column":13,"offset":5336},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"do { \n  try ...\n} catch Error.xxx {\n  \n}","position":{"start":{"line":339,"column":3,"offset":5340},"end":{"line":345,"column":6,"offset":5405},"indent":[3,3,3,3,3,3]}}],"position":{"start":{"line":335,"column":1,"offset":5305},"end":{"line":347,"column":3,"offset":5409},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":333,"column":1,"offset":5266},"end":{"line":347,"column":3,"offset":5409},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"try?","position":{"start":{"line":349,"column":5,"offset":5415},"end":{"line":349,"column":11,"offset":5421},"indent":[]}},{"type":"text","value":" : 별도의 오류결과를 받지 않고 ","position":{"start":{"line":349,"column":11,"offset":5421},"end":{"line":349,"column":30,"offset":5440},"indent":[]}},{"type":"inlineCode","value":"nil","position":{"start":{"line":349,"column":30,"offset":5440},"end":{"line":349,"column":35,"offset":5445},"indent":[]}},{"type":"text","value":"로 받음","position":{"start":{"line":349,"column":35,"offset":5445},"end":{"line":349,"column":39,"offset":5449},"indent":[]}}],"position":{"start":{"line":349,"column":5,"offset":5415},"end":{"line":349,"column":39,"offset":5449},"indent":[]}}],"position":{"start":{"line":349,"column":1,"offset":5411},"end":{"line":349,"column":39,"offset":5449},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"try!","position":{"start":{"line":350,"column":5,"offset":5454},"end":{"line":350,"column":11,"offset":5460},"indent":[]}},{"type":"text","value":" : 오류가 발생하지 않을 것이라는 확신을 가질 때 사용. 오류발생하면 런타임 오류 발생","position":{"start":{"line":350,"column":11,"offset":5460},"end":{"line":350,"column":60,"offset":5509},"indent":[]}}],"position":{"start":{"line":350,"column":5,"offset":5454},"end":{"line":350,"column":60,"offset":5509},"indent":[]}}],"position":{"start":{"line":350,"column":1,"offset":5450},"end":{"line":350,"column":60,"offset":5509},"indent":[]}}],"position":{"start":{"line":349,"column":1,"offset":5411},"end":{"line":350,"column":60,"offset":5509},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"고차함수","position":{"start":{"line":352,"column":5,"offset":5515},"end":{"line":352,"column":9,"offset":5519},"indent":[]}}],"position":{"start":{"line":352,"column":1,"offset":5511},"end":{"line":352,"column":9,"offset":5519},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"전달인자로 함수를 받거나 함수실행의 결과를 함수로 반환하는 함수","position":{"start":{"line":354,"column":1,"offset":5521},"end":{"line":354,"column":36,"offset":5556},"indent":[]}}],"position":{"start":{"line":354,"column":1,"offset":5521},"end":{"line":354,"column":36,"offset":5556},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"map","position":{"start":{"line":356,"column":6,"offset":5563},"end":{"line":356,"column":9,"offset":5566},"indent":[]}}],"position":{"start":{"line":356,"column":1,"offset":5558},"end":{"line":356,"column":9,"offset":5566},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"var numbers: [Int] = [0,1,2,3,4]\nvar doubledNumbers: [Int] = [Int]()\n\ndoubledNumbers = numbers.map({ (number: Int) -> Int in\n   return number*2                         \n})\n\n\nprint(doubledNumbers) // [0,2,4,6,8]","position":{"start":{"line":358,"column":1,"offset":5568},"end":{"line":368,"column":4,"offset":5791},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"filter","position":{"start":{"line":370,"column":6,"offset":5798},"end":{"line":370,"column":12,"offset":5804},"indent":[]}}],"position":{"start":{"line":370,"column":1,"offset":5793},"end":{"line":370,"column":12,"offset":5804},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"let evenNumbers: [Int] = numbers.filter{\n  (number: Int) -> Bool in\n  return number %2 == 0\n}\n\nlet oddNumbers: [Int] = numbers.filter{\n  $0 %2 != 0\n}","position":{"start":{"line":372,"column":1,"offset":5806},"end":{"line":381,"column":4,"offset":5968},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"조건에 맞는 값들을 걸러내어 새로운 배열로 반환. 상수로 바로 받을 수도 있음","position":{"start":{"line":383,"column":1,"offset":5970},"end":{"line":383,"column":44,"offset":6013},"indent":[]}}],"position":{"start":{"line":383,"column":1,"offset":5970},"end":{"line":383,"column":44,"offset":6013},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"reduce","position":{"start":{"line":385,"column":6,"offset":6020},"end":{"line":385,"column":12,"offset":6026},"indent":[]}}],"position":{"start":{"line":385,"column":1,"offset":6015},"end":{"line":385,"column":12,"offset":6026},"indent":[]}},{"type":"code","lang":"swift","meta":null,"value":"let someNumbers: [Int] = [2,8,15]\n\nlet sum: Int = someNumbers.reduce(0, {\n  (first: Int, second: Int) -> Int in\n  return first + second\n}) // 초기값이 0","position":{"start":{"line":387,"column":1,"offset":6028},"end":{"line":394,"column":4,"offset":6189},"indent":[1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Swift 간단 정리 3\",\"date\":\"2020-08-20T00:00:00.000Z\",\"tags\":[\"Swift\"]}","position":{"start":{"line":398,"column":1,"offset":6193},"end":{"line":398,"column":105,"offset":6297},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":398,"column":105,"offset":6297}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Swift 간단 정리 3\",\n  \"date\": \"2020-08-20T00:00:00.000Z\",\n  \"tags\": [\"Swift\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"\\uC0C1\\uC18D\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC2A4\\uC704\\uD504\\uD2B8\\uC758 \\uC0C1\\uC18D\\uC740 \\uD074\\uB798\\uC2A4, \\uD504\\uB85C\\uD1A0\\uCF5C\\uC5D0\\uC11C \\uAC00\\uB2A5\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB2E4\\uC911 \\uC0C1\\uC18D \\uBD88\\uAC00\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"class \\uC774\\uB984: \\uBD80\\uBAA8\\uD074\\uB798\\uC2A4 \\uC774\\uB984 {\\n  ...\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"class Person {\\n  var name: String = \\\"\\\"\\n  \\n  func selfIntroduce() {\\n    print(\\\"\\uC800\\uB294 \\\\(name)\\uC785\\uB2C8\\uB2E4\\\")\\n  }\\n  \\n  final func sayHello() {\\n    print(\\\"Hello\\\")\\n  }\\n  // final \\uD0A4\\uC6CC\\uB4DC\\uB97C \\uD1B5\\uD574 \\uC790\\uC2DD\\uD074\\uB798\\uC2A4\\uC5D0\\uC11C \\uC7AC\\uC815\\uC758 \\uBD88\\uAC00\\n  \\n  // \\uD0C0\\uC785 \\uBA54\\uC11C\\uB4DC - \\uC7AC\\uC815\\uC758 \\uBD88\\uAC00\\n  static func typeMethod() {\\n    print(\\\"type method - static\\\")\\n  }\\n  // \\uC7AC\\uC815\\uC758 \\uAC00\\uB2A5 \\uBA54\\uC11C\\uB4DC\\n  class func classMethod() {\\n    print(\\\"type method - class\\\")\\n  }\\n  // final class\\uB77C\\uACE0 \\uD45C\\uD604\\uD558\\uBA74 static\\uACFC \\uB3D9\\uC77C\\n}\\n\\nclass Student: Person {\\n  var major: String = \\\"\\\"\\n  \\n  override func selfIntroduce() {\\n    print(\\\"\\uC800\\uB294 \\\\(name)\\uC774\\uACE0, \\uC804\\uACF5\\uC740 \\\\(major)\\uC785\\uB2C8\\uB2E4\\\")\\n  }\\n  \\n  override class func classMethod() {\\n    print(\\\"overriden type method - class\\\")\\n  }\\n}\\n\")), mdx(\"h3\", null, \"\\uC778\\uC2A4\\uD134\\uC2A4\\uC758 \\uC0DD\\uC131\\uACFC \\uC18C\\uBA78\"), mdx(\"h4\", null, \"\\uC774\\uB2C8\\uC15C\\uB77C\\uC774\\uC800\"), mdx(\"p\", null, \"\\uC2A4\\uC704\\uD504\\uD2B8\\uC758 \\uBAA8\\uB4E0 \\uC778\\uC2A4\\uD134\\uC2A4\\uB294 \\uCD08\\uAE30\\uD654\\uC640 \\uB3D9\\uC2DC\\uC5D0 \\uBAA8\\uB4E0 \\uD504\\uB85C\\uD37C\\uD2F0\\uC5D0 \\uC720\\uD6A8\\uD55C \\uAC12\\uC774 \\uD560\\uB2F9\\uB418\\uC5B4 \\uC788\\uC5B4\\uC57C \\uD568. \\uD504\\uB85C\\uD37C\\uD2F0\\uC5D0 \\uBBF8\\uB9AC \\uAE30\\uBCF8\\uAC12\\uC744 \\uD560\\uB2F9\\uD574\\uB450\\uBA74 \\uC778\\uC2A4\\uD134\\uC2A4\\uAC00 \\uC0DD\\uC131\\uB428\\uACFC \\uB3D9\\uC2DC\\uC5D0 \\uCD08\\uAE30\\uAC12\\uC744 \\uC9C0\\uB2C8\\uAC8C \\uB428\"), mdx(\"p\", null, \"\\uAE30\\uBCF8\\uAC12 \\uC9C0\\uC815\\uC774 \\uC5B4\\uB824\\uC6B4 \\uACBD\\uC6B0 \\uC774\\uB2C8\\uC15C\\uB77C\\uC774\\uC800\\uB97C \\uD1B5\\uD574 \\uCD08\\uAE30\\uAC12 \\uC804\\uB2EC \\uAC00\\uB2A5\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"class Person {\\n  var name: String\\n  var age: Int\\n  var nickName: String?\\n  \\n  convenience init(name: String, age:Int, nickName: String){\\n    //self.name = name\\n    //self.age = age\\n    // \\uC790\\uAE30 \\uC790\\uC2E0\\uC758 \\uC774\\uB2C8\\uC15C\\uB77C\\uC774\\uC800 \\uD638\\uCD9C \\uAC00\\uB2A5\\n    self.init(name: name, age: age)\\n    self.nickName = nickName\\n  }\\n  \\n  // \\uAE30\\uBCF8\\uAC12 \\uC124\\uC815\\uC774 \\uAF2D \\uD544\\uC694\\uD558\\uC9C0 \\uC54A\\uB2E4\\uBA74 \\uC635\\uC154\\uB110\\uC744 \\uD65C\\uC6A9\\n  init(name: String, age:Int) {\\n    self.name = name\\n    self.age = age\\n  }\\n}\\n\\nlet hana: Person = Person(name: \\\"hana\\\", age: 20, nickName: \\\"\\uD558\\uB098\\\")\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\uC2E4\\uD328 \\uAC00\\uB2A5\\uD55C \\uC774\\uB2C8\\uC15C\\uB77C\\uC774\\uC800\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"class Person2 {\\n  var name: String\\n  var age: Int\\n  var nickName: String?\\n  \\n  init?(name: String, age: Int) {\\n    if (0...120).contains(age) == false {\\n      return nil\\n    }\\n    if name.characters.count == 0 {\\n      return nil\\n    }\\n    \\n    self.name = name\\n    self.age = age\\n  }\\n}\\n\\nlet john: Person2? = Person2(name:\\\"john\\\", age:23)\\n\")), mdx(\"h4\", null, \"\\uB514\\uC774\\uB2C8\\uC15C\\uB77C\\uC774\\uC800\"), mdx(\"p\", null, \"\\uD074\\uB798\\uC2A4\\uC758 \\uC778\\uC2A4\\uD134\\uC2A4\\uAC00 \\uBA54\\uBAA8\\uB9AC\\uC5D0\\uC11C \\uD574\\uC81C\\uB418\\uB294 \\uC2DC\\uC810\\uC5D0 \\uD638\\uCD9C\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"class Person3 {\\n  var name: String\\n  var age: Int\\n  \\n  init(name: String, age:Int) {\\n    self.name = name\\n    self.age = age\\n  }\\n  deinit {\\n    ...\\n  }\\n}\\n\")), mdx(\"h3\", null, \"\\uC635\\uC154\\uB110 \\uCCB4\\uC774\\uB2DD\"), mdx(\"p\", null, \"\\uC635\\uC154\\uB110 \\uC694\\uC18C \\uB0B4\\uBD80\\uC758 \\uD504\\uB85C\\uD37C\\uD2F0\\uB85C \\uB610\\uB2E4\\uC2DC \\uC635\\uC154\\uB110\\uC774 \\uC5F0\\uC18D\\uC801\\uC73C\\uB85C \\uC5F0\\uACB0\\uB418\\uB294 \\uACBD\\uC6B0 \\uC720\\uC6A9\\uD558\\uAC8C \\uC0AC\\uC6A9\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"class Person {\\n  var name: String\\n  var job: String?\\n  var home: Apartment?\\n  \\n  init(name: String){\\n    self.name = name\\n  }\\n}\\n\\nclass Apartment {\\n  var buildingNumber: String\\n  var roomNumber: String\\n  var `guard`: Person?\\n  var owner: Person?\\n  \\n  init(dong: String, ho: String) {\\n    buildingNumber = dong\\n    roomNumber = ho\\n  }\\n}\\n\\nfunc guardJobWithOptionalChaining(owner: Person?) {\\n  if let guardJob = owner?.home?.guard?.job {\\n    print(\\\"\\uC6B0\\uB9AC\\uC9D1 \\uACBD\\uBE44\\uC6D0\\uC758 \\uC9C1\\uC5C5\\uC740 \\\\(guardJob)\\uC785\\uB2C8\\uB2E4\\\")\\n  } else {\\n    print(\\\"\\uC6B0\\uB9AC\\uC9D1 \\uACBD\\uBE44\\uC6D0\\uC740 \\uC9C1\\uC5C5\\uC774 \\uC5C6\\uC5B4\\uC694\\\")\\n  }\\n}\\n\")), mdx(\"h4\", null, \"nil \\uBCD1\\uD569 \\uC5F0\\uC0B0\\uC790\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"var guardJob: String\\n\\n// x ?? y : x\\uAC00 nil\\uC774\\uB77C\\uBA74 y\\uB97C \\uD560\\uB2F9\\uD558\\uB77C\\nguardJob = yagom?.home?.guard?.job ?? \\\"\\uC288\\uD37C\\uB9E8\\\"\\nprint(guardJob) // \\uC288\\uD37C\\uB9E8\\n\")), mdx(\"h3\", null, \"\\uD0C0\\uC785\\uCE90\\uC2A4\\uD305\"), mdx(\"p\", null, \"\\uC2A4\\uC704\\uD504\\uD2B8\\uC758 \\uD0C0\\uC785\\uCE90\\uC2A4\\uD305\\uC740 \\uC778\\uC2A4\\uD134\\uC2A4\\uC758 \\uD0C0\\uC785\\uC744 \\uD655\\uC778\\uD558\\uB294 \\uC6A9\\uB3C4 \\uB610\\uB294 \\uD074\\uB798\\uC2A4\\uC758 \\uC778\\uC2A4\\uD134\\uC2A4\\uB97C \\uBD80\\uBAA8 \\uD639\\uC740 \\uC790\\uC2DD \\uD074\\uB798\\uC2A4 \\uD0C0\\uC785\\uC73C\\uB85C \\uC0AC\\uC6A9\\uD560 \\uC218 \\uC788\\uB294\\uC9C0 \\uD655\\uC778\\uD558\\uB294 \\uC6A9\\uB3C4\\uB85C \\uC0AC\\uC6A9\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"is\"), \" , \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"as\"), \" \\uB97C \\uC0AC\\uC6A9\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"class Person {\\n  ...\\n}\\nclass Student: Person {\\n  ...\\n}\\nclass UnivStudent: Student {\\n  ...\\n}\\n\\nvar me: Person = Person()\\nvar hana: Student = Student()\\nvar jason: UnivStudent = UnivStudent()\\n\\nvar result: Bool\\n\\nresult = me is Person // true\\nresult = me is Student // false\\nresult = me is UnivStudent // false\\n\\nresult = hana is Person // true\\nresult = hana is Student // true\\nresult = hana is UnivStudent // false\\n\\nresult = jason is Person // true\\nresult = jason is Student // true\\nresult = jason is UnivStudent // true\\n\")), mdx(\"h4\", null, \"\\uC5C5\\uCE90\\uC2A4\\uD305\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"as\"), \" \\uB97C \\uC0AC\\uC6A9\\uD558\\uC5EC \\uBD80\\uBAA8\\uD074\\uB798\\uC2A4\\uC758 \\uC778\\uC2A4\\uD134\\uC2A4\\uB85C \\uC0AC\\uC6A9\\uD560 \\uC218 \\uC788\\uB3C4\\uB85D \\uCEF4\\uD30C\\uC77C\\uB7EC\\uC5D0\\uAC8C \\uD0C0\\uC785\\uC815\\uBCF4\\uB97C \\uC804\\uD658\\uD574\\uC90C\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Any\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AnyObject\"), \"\\uB85C\\uB3C4 \\uD0C0\\uC785\\uC815\\uBCF4\\uB97C \\uBCC0\\uD658\\uD560 \\uC218 \\uC788\\uC74C\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC554\\uC2DC\\uC801\\uC73C\\uB85C \\uCC98\\uB9AC\\uB418\\uBBC0\\uB85C \\uC0DD\\uB7B5\\uAC00\\uB2A5\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"var mike: Person = UnivStudent() as Person\\nvar jenny: Student = Student()\\nvar jina: Any = Person()\\n\")), mdx(\"h4\", null, \"\\uB2E4\\uC6B4\\uCE90\\uC2A4\\uD305\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC790\\uC2DD \\uD074\\uB798\\uC2A4\\uC758 \\uC778\\uC2A4\\uD134\\uC2A4\\uB85C \\uC0AC\\uC6A9\\uD560 \\uC218 \\uC788\\uB3C4\\uB85D \\uD0C0\\uC785\\uC815\\uBCF4 \\uC804\\uD654\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"as?\"), \" \\uC870\\uAC74\\uBD80 \\uB2E4\\uC6B4 \\uCE90\\uC2A4\\uD305\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"var optionalCasted: Student?\\n\\noptionalCasted = mike as? UnivStudent \\noptionalCasted = jenny as? UnivStudent // nil\\noptionalCasted = jina as? UnivStudent // nil\\noptionalCasted = jina as? Student // nil\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"as!\"), \" \\uAC15\\uC81C \\uB2E4\\uC6B4 \\uCE90\\uC2A4\\uD305\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"var forcedCasted: Student\\n\\nforcedCasted = mike as! UnivStudent\\nforcedCasted = jenny as? UnivStudent // error\\nforcedCasted = jina as? UnivStudent // error\\nforcedCasted = jina as? Student // erro\\n\")), mdx(\"h3\", null, \"assert\\uC640 guard\"), mdx(\"p\", null, \"\\uC560\\uD50C\\uB9AC\\uCF00\\uC774\\uC158\\uC774 \\uB3D9\\uC791 \\uB3C4\\uC911\\uC5D0 \\uC0DD\\uC131\\uD558\\uB294 \\uB2E4\\uC591\\uD55C \\uACB0\\uACFC\\uAC12\\uC744 \\uB3D9\\uC801\\uC73C\\uB85C \\uD655\\uC778\\uD558\\uACE0 \\uC548\\uC804\\uD558\\uAC8C \\uCC98\\uB9AC\\uD560 \\uC218 \\uC788\\uB3C4\\uB85D \\uB3C4\\uC640\\uC90C\"), mdx(\"h4\", null, \"assertion\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"assert(_: _: file : line: )\"), \" \\uD568\\uC218\\uB97C \\uC0AC\\uC6A9\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB514\\uBC84\\uAE45 \\uBAA8\\uB4DC\\uC5D0\\uC11C\\uB9CC \\uB3D9\\uC791\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBC30\\uD3EC\\uD558\\uB294 \\uC560\\uD50C\\uB9AC\\uCF00\\uC774\\uC158\\uC5D0\\uC11C\\uB294 \\uC81C\\uC678\\uB428\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"var someInt: Int = 0\\n\\nassert(someInt == 0, \\\"someInt != 0\\\")\\n\\nsomeInt = 1\\n// \\uB3D9\\uC791 \\uC911\\uC9C0, \\uAC80\\uC99D \\uC2E4\\uD328\\n// assertion failed: someInt != 0: ...\\n\")), mdx(\"h4\", null, \"Early Exit\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"guard\"), \" \\uB97C \\uC0AC\\uC6A9\\uD558\\uC5EC \\uC798\\uBABB\\uB41C \\uAC12\\uC758 \\uC804\\uB2EC \\uC2DC \\uD2B9\\uC815 \\uC2E4\\uD589\\uAD6C\\uBB38\\uC744 \\uBE60\\uB974\\uAC8C \\uC885\\uB8CC\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB514\\uBC84\\uAE45\\uBAA8\\uB4DC \\uBFD0\\uB9CC \\uC544\\uB2C8\\uB77C \\uC5B4\\uB5A4 \\uC870\\uAC74\\uC5D0\\uC11C\\uB3C4 \\uB3D9\\uC791\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"else\"), \" \\uBE14\\uB85D\\uC5D0\\uB294 \\uC885\\uB8CC \\uC9C0\\uC2DC\\uC5B4\\uAC00 \\uBC18\\uB4DC\\uC2DC \\uC788\\uC5B4\\uC57C \\uD568\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC635\\uC154\\uB110\\uACFC \\uD568\\uAED8 \\uB9CE\\uC774 \\uC4F0\\uC778\\uB2E4.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"func functionWithGuard(age: Int?) {\\n    guard let unwrappedAge = age,\\n    unwrappedAge < 130, unwrappedAge >=0 else {\\n      print(\\\"\\uB098\\uC774\\uAC12 \\uC785\\uB825\\uC774 \\uC798\\uBABB\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4\\\")\\n      return \\n    }\\n  \\n  print(\\\"\\uB2F9\\uC2E0\\uC758 \\uB098\\uC774\\uB294 \\\\(unwrappedAge)\\uC138 \\uC785\\uB2C8\\uB2E4\\\")\\n}\\n\")), mdx(\"h3\", null, \"\\uD504\\uB85C\\uD1A0\\uCF5C\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD504\\uB85C\\uD1A0\\uCF5C\\uC740 \\uD2B9\\uC815 \\uC5ED\\uD560\\uC744 \\uC218\\uD589\\uD558\\uAE30 \\uC704\\uD55C \\uBA54\\uC11C\\uB4DC, \\uD504\\uB85C\\uD37C\\uD2F0, \\uC774\\uB2C8\\uC15C\\uB77C\\uC774\\uC800 \\uB4F1\\uC758 \\uC694\\uAD6C\\uC0AC\\uD56D\\uC744 \\uC815\\uC758\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD6C\\uC870\\uCCB4, \\uD074\\uB798\\uC2A4, \\uC5F4\\uAC70\\uD615\\uC740 \\uD504\\uB85C\\uD1A0\\uCF5C\\uC744 \\uCC44\\uD0DD\\uD574\\uC11C \\uD504\\uB85C\\uD1A0\\uCF5C\\uC758 \\uC694\\uAD6C\\uC0AC\\uD56D\\uC744 \\uC2E4\\uC81C\\uB85C \\uAD6C\\uD604\\uD560 \\uC218 \\uC788\\uC74C\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC790\\uBC14\\uC758 \\uC778\\uD130\\uD398\\uC774\\uC2A4 \\uB290\\uB08C\\uC778\\uB4EF..\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"protocol \\uC774\\uB984 {\\n  ...\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC0C1\\uC18D\\uB3C4 \\uAC00\\uB2A5. \\uB2E4\\uC911\\uC0C1\\uC18D \\uAC00\\uB2A5\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"is\"), \" , \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"as\"), \" \\uD0A4\\uC6CC\\uB4DC \\uC0AC\\uC6A9 \\uAC00\\uB2A5\")), mdx(\"h3\", null, \"\\uC775\\uC2A4\\uD150\\uC158\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC5EC\\uB7EC\\uD0C0\\uC785\\uC5D0 \\uC0C8\\uB85C\\uC6B4 \\uAE30\\uB2A5\\uC744 \\uCD94\\uAC00\\uD560 \\uC218 \\uC788\\uB294 \\uAE30\\uB2A5\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC5F0\\uC0B0 \\uD504\\uB85C\\uD37C\\uD2F0, \\uD0C0\\uC785 \\uBA54\\uC11C\\uB4DC, \\uC774\\uB2C8\\uC15C\\uB77C\\uC774\\uC800, \\uC11C\\uBE0C\\uC2A4\\uD06C\\uB9BD\\uD2B8, \\uC911\\uCCA9\\uD0C0\\uC785, \\uD2B9\\uC815 \\uD504\\uB85C\\uD1A0\\uCF5C \\uB4F1\\uC744 \\uCD94\\uAC00 \\uAC00\\uB2A5\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"extension \\uD655\\uC7A5\\uD560 \\uD0C0\\uC785 {\\n  ...\\n}\\nextension \\uD655\\uC7A5\\uD560 \\uD0C0\\uC785 : \\uD504\\uB85C\\uD1A0\\uCF5C1, \\uD504\\uB85C\\uD1A0\\uCF5C2 {\\n  ...\\n}\\n\")), mdx(\"h3\", null, \"\\uC624\\uB958\\uCC98\\uB9AC\"), mdx(\"p\", null, \"\\uC624\\uB958\\uD45C\\uD604 \\uBC29\\uBC95\\uC740 Error \\uD504\\uB85C\\uD1A0\\uCF5C\\uACFC \\uC5F4\\uAC70\\uD615\\uC744 \\uD1B5\\uD574\\uC11C \\uC624\\uB958\\uB97C \\uD45C\\uD604\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"enum \\uC624\\uB958\\uC885\\uB958\\uC774\\uB984: Error {\\n  case \\uC885\\uB9581\\n  case \\uC885\\uB9582\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uC624\\uB958\\uAC00 \\uBC1C\\uC0DD\\uD560 \\uAC00\\uB2A5\\uC131\\uC774 \\uC788\\uB294 \\uBD80\\uBD84\\uC5D0 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"throw\"), \" \\uD0A4\\uC6CC\\uB4DC\\uB97C \\uCD94\\uAC00\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"try\"), \" \\uB97C \\uC0AC\\uC6A9\\uD558\\uC5EC \\uD638\\uCD9C\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do-catch\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"do { \\n  try ...\\n} catch Error.xxx {\\n  \\n}\\n\")))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"try?\"), \" : \\uBCC4\\uB3C4\\uC758 \\uC624\\uB958\\uACB0\\uACFC\\uB97C \\uBC1B\\uC9C0 \\uC54A\\uACE0 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"nil\"), \"\\uB85C \\uBC1B\\uC74C\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"try!\"), \" : \\uC624\\uB958\\uAC00 \\uBC1C\\uC0DD\\uD558\\uC9C0 \\uC54A\\uC744 \\uAC83\\uC774\\uB77C\\uB294 \\uD655\\uC2E0\\uC744 \\uAC00\\uC9C8 \\uB54C \\uC0AC\\uC6A9. \\uC624\\uB958\\uBC1C\\uC0DD\\uD558\\uBA74 \\uB7F0\\uD0C0\\uC784 \\uC624\\uB958 \\uBC1C\\uC0DD\")), mdx(\"h3\", null, \"\\uACE0\\uCC28\\uD568\\uC218\"), mdx(\"p\", null, \"\\uC804\\uB2EC\\uC778\\uC790\\uB85C \\uD568\\uC218\\uB97C \\uBC1B\\uAC70\\uB098 \\uD568\\uC218\\uC2E4\\uD589\\uC758 \\uACB0\\uACFC\\uB97C \\uD568\\uC218\\uB85C \\uBC18\\uD658\\uD558\\uB294 \\uD568\\uC218\"), mdx(\"h4\", null, \"map\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"var numbers: [Int] = [0,1,2,3,4]\\nvar doubledNumbers: [Int] = [Int]()\\n\\ndoubledNumbers = numbers.map({ (number: Int) -> Int in\\n   return number*2                         \\n})\\n\\n\\nprint(doubledNumbers) // [0,2,4,6,8]\\n\")), mdx(\"h4\", null, \"filter\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"let evenNumbers: [Int] = numbers.filter{\\n  (number: Int) -> Bool in\\n  return number %2 == 0\\n}\\n\\nlet oddNumbers: [Int] = numbers.filter{\\n  $0 %2 != 0\\n}\\n\")), mdx(\"p\", null, \"\\uC870\\uAC74\\uC5D0 \\uB9DE\\uB294 \\uAC12\\uB4E4\\uC744 \\uAC78\\uB7EC\\uB0B4\\uC5B4 \\uC0C8\\uB85C\\uC6B4 \\uBC30\\uC5F4\\uB85C \\uBC18\\uD658. \\uC0C1\\uC218\\uB85C \\uBC14\\uB85C \\uBC1B\\uC744 \\uC218\\uB3C4 \\uC788\\uC74C\"), mdx(\"h4\", null, \"reduce\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-swift\"\n  }), \"let someNumbers: [Int] = [2,8,15]\\n\\nlet sum: Int = someNumbers.reduce(0, {\\n  (first: Int, second: Int) -> Int in\\n  return first + second\\n}) // \\uCD08\\uAE30\\uAC12\\uC774 0\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Swift 간단 정리 3\",\n  \"date\": \"2020-08-20T00:00:00.000Z\",\n  \"tags\": [\"Swift\"]\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h3>{`상속`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`스위프트의 상속은 클래스, 프로토콜에서 가능`}</li>\n      <li parentName=\"ul\">{`다중 상속 불가`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class 이름: 부모클래스 이름 {\n  ...\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class Person {\n  var name: String = \"\"\n  \n  func selfIntroduce() {\n    print(\"저는 \\\\(name)입니다\")\n  }\n  \n  final func sayHello() {\n    print(\"Hello\")\n  }\n  // final 키워드를 통해 자식클래스에서 재정의 불가\n  \n  // 타입 메서드 - 재정의 불가\n  static func typeMethod() {\n    print(\"type method - static\")\n  }\n  // 재정의 가능 메서드\n  class func classMethod() {\n    print(\"type method - class\")\n  }\n  // final class라고 표현하면 static과 동일\n}\n\nclass Student: Person {\n  var major: String = \"\"\n  \n  override func selfIntroduce() {\n    print(\"저는 \\\\(name)이고, 전공은 \\\\(major)입니다\")\n  }\n  \n  override class func classMethod() {\n    print(\"overriden type method - class\")\n  }\n}\n`}</code></pre>\n    <h3>{`인스턴스의 생성과 소멸`}</h3>\n    <h4>{`이니셜라이저`}</h4>\n    <p>{`스위프트의 모든 인스턴스는 초기화와 동시에 모든 프로퍼티에 유효한 값이 할당되어 있어야 함. 프로퍼티에 미리 기본값을 할당해두면 인스턴스가 생성됨과 동시에 초기값을 지니게 됨`}</p>\n    <p>{`기본값 지정이 어려운 경우 이니셜라이저를 통해 초기값 전달 가능`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class Person {\n  var name: String\n  var age: Int\n  var nickName: String?\n  \n  convenience init(name: String, age:Int, nickName: String){\n    //self.name = name\n    //self.age = age\n    // 자기 자신의 이니셜라이저 호출 가능\n    self.init(name: name, age: age)\n    self.nickName = nickName\n  }\n  \n  // 기본값 설정이 꼭 필요하지 않다면 옵셔널을 활용\n  init(name: String, age:Int) {\n    self.name = name\n    self.age = age\n  }\n}\n\nlet hana: Person = Person(name: \"hana\", age: 20, nickName: \"하나\")\n`}</code></pre>\n    <p><strong parentName=\"p\">{`실패 가능한 이니셜라이저`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class Person2 {\n  var name: String\n  var age: Int\n  var nickName: String?\n  \n  init?(name: String, age: Int) {\n    if (0...120).contains(age) == false {\n      return nil\n    }\n    if name.characters.count == 0 {\n      return nil\n    }\n    \n    self.name = name\n    self.age = age\n  }\n}\n\nlet john: Person2? = Person2(name:\"john\", age:23)\n`}</code></pre>\n    <h4>{`디이니셜라이저`}</h4>\n    <p>{`클래스의 인스턴스가 메모리에서 해제되는 시점에 호출`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class Person3 {\n  var name: String\n  var age: Int\n  \n  init(name: String, age:Int) {\n    self.name = name\n    self.age = age\n  }\n  deinit {\n    ...\n  }\n}\n`}</code></pre>\n    <h3>{`옵셔널 체이닝`}</h3>\n    <p>{`옵셔널 요소 내부의 프로퍼티로 또다시 옵셔널이 연속적으로 연결되는 경우 유용하게 사용`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class Person {\n  var name: String\n  var job: String?\n  var home: Apartment?\n  \n  init(name: String){\n    self.name = name\n  }\n}\n\nclass Apartment {\n  var buildingNumber: String\n  var roomNumber: String\n  var \\`guard\\`: Person?\n  var owner: Person?\n  \n  init(dong: String, ho: String) {\n    buildingNumber = dong\n    roomNumber = ho\n  }\n}\n\nfunc guardJobWithOptionalChaining(owner: Person?) {\n  if let guardJob = owner?.home?.guard?.job {\n    print(\"우리집 경비원의 직업은 \\\\(guardJob)입니다\")\n  } else {\n    print(\"우리집 경비원은 직업이 없어요\")\n  }\n}\n`}</code></pre>\n    <h4>{`nil 병합 연산자`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`var guardJob: String\n\n// x ?? y : x가 nil이라면 y를 할당하라\nguardJob = yagom?.home?.guard?.job ?? \"슈퍼맨\"\nprint(guardJob) // 슈퍼맨\n`}</code></pre>\n    <h3>{`타입캐스팅`}</h3>\n    <p>{`스위프트의 타입캐스팅은 인스턴스의 타입을 확인하는 용도 또는 클래스의 인스턴스를 부모 혹은 자식 클래스 타입으로 사용할 수 있는지 확인하는 용도로 사용`}</p>\n    <p><inlineCode parentName=\"p\">{`is`}</inlineCode>{` , `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{` 를 사용`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class Person {\n  ...\n}\nclass Student: Person {\n  ...\n}\nclass UnivStudent: Student {\n  ...\n}\n\nvar me: Person = Person()\nvar hana: Student = Student()\nvar jason: UnivStudent = UnivStudent()\n\nvar result: Bool\n\nresult = me is Person // true\nresult = me is Student // false\nresult = me is UnivStudent // false\n\nresult = hana is Person // true\nresult = hana is Student // true\nresult = hana is UnivStudent // false\n\nresult = jason is Person // true\nresult = jason is Student // true\nresult = jason is UnivStudent // true\n`}</code></pre>\n    <h4>{`업캐스팅`}</h4>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`as`}</inlineCode>{` 를 사용하여 부모클래스의 인스턴스로 사용할 수 있도록 컴파일러에게 타입정보를 전환해줌`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Any`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`AnyObject`}</inlineCode>{`로도 타입정보를 변환할 수 있음`}</li>\n      <li parentName=\"ul\">{`암시적으로 처리되므로 생략가능`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`var mike: Person = UnivStudent() as Person\nvar jenny: Student = Student()\nvar jina: Any = Person()\n`}</code></pre>\n    <h4>{`다운캐스팅`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`자식 클래스의 인스턴스로 사용할 수 있도록 타입정보 전화`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`as?`}</inlineCode>{` 조건부 다운 캐스팅`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`var optionalCasted: Student?\n\noptionalCasted = mike as? UnivStudent \noptionalCasted = jenny as? UnivStudent // nil\noptionalCasted = jina as? UnivStudent // nil\noptionalCasted = jina as? Student // nil\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`as!`}</inlineCode>{` 강제 다운 캐스팅`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`var forcedCasted: Student\n\nforcedCasted = mike as! UnivStudent\nforcedCasted = jenny as? UnivStudent // error\nforcedCasted = jina as? UnivStudent // error\nforcedCasted = jina as? Student // erro\n`}</code></pre>\n    <h3>{`assert와 guard`}</h3>\n    <p>{`애플리케이션이 동작 도중에 생성하는 다양한 결과값을 동적으로 확인하고 안전하게 처리할 수 있도록 도와줌`}</p>\n    <h4>{`assertion`}</h4>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`assert(_: _: file : line: )`}</inlineCode>{` 함수를 사용`}</li>\n      <li parentName=\"ul\">{`디버깅 모드에서만 동작`}</li>\n      <li parentName=\"ul\">{`배포하는 애플리케이션에서는 제외됨`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`var someInt: Int = 0\n\nassert(someInt == 0, \"someInt != 0\")\n\nsomeInt = 1\n// 동작 중지, 검증 실패\n// assertion failed: someInt != 0: ...\n`}</code></pre>\n    <h4>{`Early Exit`}</h4>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`guard`}</inlineCode>{` 를 사용하여 잘못된 값의 전달 시 특정 실행구문을 빠르게 종료`}</li>\n      <li parentName=\"ul\">{`디버깅모드 뿐만 아니라 어떤 조건에서도 동작`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`else`}</inlineCode>{` 블록에는 종료 지시어가 반드시 있어야 함`}</li>\n      <li parentName=\"ul\">{`옵셔널과 함께 많이 쓰인다.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func functionWithGuard(age: Int?) {\n    guard let unwrappedAge = age,\n    unwrappedAge < 130, unwrappedAge >=0 else {\n      print(\"나이값 입력이 잘못되었습니다\")\n      return \n    }\n  \n  print(\"당신의 나이는 \\\\(unwrappedAge)세 입니다\")\n}\n`}</code></pre>\n    <h3>{`프로토콜`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`프로토콜은 특정 역할을 수행하기 위한 메서드, 프로퍼티, 이니셜라이저 등의 요구사항을 정의`}</li>\n      <li parentName=\"ul\">{`구조체, 클래스, 열거형은 프로토콜을 채택해서 프로토콜의 요구사항을 실제로 구현할 수 있음`}</li>\n      <li parentName=\"ul\">{`자바의 인터페이스 느낌인듯..`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`protocol 이름 {\n  ...\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`상속도 가능. 다중상속 가능`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`is`}</inlineCode>{` , `}<inlineCode parentName=\"li\">{`as`}</inlineCode>{` 키워드 사용 가능`}</li>\n    </ul>\n    <h3>{`익스텐션`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`여러타입에 새로운 기능을 추가할 수 있는 기능`}</li>\n      <li parentName=\"ul\">{`연산 프로퍼티, 타입 메서드, 이니셜라이저, 서브스크립트, 중첩타입, 특정 프로토콜 등을 추가 가능`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`extension 확장할 타입 {\n  ...\n}\nextension 확장할 타입 : 프로토콜1, 프로토콜2 {\n  ...\n}\n`}</code></pre>\n    <h3>{`오류처리`}</h3>\n    <p>{`오류표현 방법은 Error 프로토콜과 열거형을 통해서 오류를 표현`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`enum 오류종류이름: Error {\n  case 종류1\n  case 종류2\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`오류가 발생할 가능성이 있는 부분에 `}<inlineCode parentName=\"p\">{`throw`}</inlineCode>{` 키워드를 추가`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`try`}</inlineCode>{` 를 사용하여 호출`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Do-catch`}</li>\n        </ul>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-swift\"\n          }}>{`do { \n  try ...\n} catch Error.xxx {\n  \n}\n`}</code></pre>\n      </li>\n    </ul>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`try?`}</inlineCode>{` : 별도의 오류결과를 받지 않고 `}<inlineCode parentName=\"li\">{`nil`}</inlineCode>{`로 받음`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`try!`}</inlineCode>{` : 오류가 발생하지 않을 것이라는 확신을 가질 때 사용. 오류발생하면 런타임 오류 발생`}</li>\n    </ul>\n    <h3>{`고차함수`}</h3>\n    <p>{`전달인자로 함수를 받거나 함수실행의 결과를 함수로 반환하는 함수`}</p>\n    <h4>{`map`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`var numbers: [Int] = [0,1,2,3,4]\nvar doubledNumbers: [Int] = [Int]()\n\ndoubledNumbers = numbers.map({ (number: Int) -> Int in\n   return number*2                         \n})\n\n\nprint(doubledNumbers) // [0,2,4,6,8]\n`}</code></pre>\n    <h4>{`filter`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let evenNumbers: [Int] = numbers.filter{\n  (number: Int) -> Bool in\n  return number %2 == 0\n}\n\nlet oddNumbers: [Int] = numbers.filter{\n  $0 %2 != 0\n}\n`}</code></pre>\n    <p>{`조건에 맞는 값들을 걸러내어 새로운 배열로 반환. 상수로 바로 받을 수도 있음`}</p>\n    <h4>{`reduce`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let someNumbers: [Int] = [2,8,15]\n\nlet sum: Int = someNumbers.reduce(0, {\n  (first: Int, second: Int) -> Int in\n  return first + second\n}) // 초기값이 0\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}