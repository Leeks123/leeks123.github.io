{"expireTime":9007200851285373000,"key":"gatsby-plugin-mdx-entire-payload-b8fc507e8bb211eade9ff975c447b7f1-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":6,"children":[{"type":"text","value":"큐","position":{"start":{"line":2,"column":8,"offset":8},"end":{"line":2,"column":9,"offset":9},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":9,"offset":9},"indent":[]}},{"type":"code","lang":"c++","meta":null,"value":"#include <iostream>\n#include <queue>\nusing namespace std;\nint main(){\n\t\n\tqueue<int> q;//int자료형을 저장하는 큐 생성\n\t\n\tq.push(4); // 맨 뒤에 요소 삽입\n\tq.pop(); // 맨 앞의 요소를 반환\n\t\n  q.front();//큐의 맨 앞에 있는 요소에 대한 참조를 반환\n  q.back();//큐의 맨 뒤에 있는 요소에 대한 참조를 반환\n  \n  q.empty(); //큐가 비어있으면 true, 비어있지 않으면 false 반환\n\t\n  q.size(); //큐에 저장되어 있는 원소의 개수\n  \n\treturn 0;\n}","position":{"start":{"line":4,"column":1,"offset":11},"end":{"line":24,"column":4,"offset":360},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"dque 클래스 기반","position":{"start":{"line":26,"column":1,"offset":362},"end":{"line":26,"column":12,"offset":373},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":362},"end":{"line":26,"column":12,"offset":373},"indent":[]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"우선순위 큐","position":{"start":{"line":30,"column":8,"offset":384},"end":{"line":30,"column":14,"offset":390},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":377},"end":{"line":30,"column":14,"offset":390},"indent":[]}},{"type":"code","lang":"c++","meta":null,"value":"#include <queue>\nusing namespace std;\nint main(){\n  \n  priority_queue<int> pq; //내림차순으로 저장\n  \n  // <변수명, 컨테이너, 비교함수>\n  priority_queue<int, vector<int>, less<int> > pque;\n  \n  pq.push(10);\n  pq.pop();\n  \n  pq.top();\n  \n  pq.size();\n  \n  pq.empty();\n  \n \n  \n  return 0;\n}","position":{"start":{"line":32,"column":1,"offset":392},"end":{"line":55,"column":4,"offset":672},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":" vector 클래스 기반","position":{"start":{"line":57,"column":1,"offset":674},"end":{"line":57,"column":15,"offset":688},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":674},"end":{"line":57,"column":15,"offset":688},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"CPP STL - Queue\",\"date\":\"2020-08-04T00:00:00.000Z\",\"tags\":[\"CPP\"]}","position":{"start":{"line":61,"column":1,"offset":692},"end":{"line":61,"column":105,"offset":796},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":61,"column":105,"offset":796}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"CPP STL - Queue\",\n  \"date\": \"2020-08-04T00:00:00.000Z\",\n  \"tags\": [\"CPP\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h6\", null, \"\\uD050\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-c++\"\n  }), \"#include <iostream>\\n#include <queue>\\nusing namespace std;\\nint main(){\\n    \\n    queue<int> q;//int\\uC790\\uB8CC\\uD615\\uC744 \\uC800\\uC7A5\\uD558\\uB294 \\uD050 \\uC0DD\\uC131\\n    \\n    q.push(4); // \\uB9E8 \\uB4A4\\uC5D0 \\uC694\\uC18C \\uC0BD\\uC785\\n    q.pop(); // \\uB9E8 \\uC55E\\uC758 \\uC694\\uC18C\\uB97C \\uBC18\\uD658\\n    \\n  q.front();//\\uD050\\uC758 \\uB9E8 \\uC55E\\uC5D0 \\uC788\\uB294 \\uC694\\uC18C\\uC5D0 \\uB300\\uD55C \\uCC38\\uC870\\uB97C \\uBC18\\uD658\\n  q.back();//\\uD050\\uC758 \\uB9E8 \\uB4A4\\uC5D0 \\uC788\\uB294 \\uC694\\uC18C\\uC5D0 \\uB300\\uD55C \\uCC38\\uC870\\uB97C \\uBC18\\uD658\\n  \\n  q.empty(); //\\uD050\\uAC00 \\uBE44\\uC5B4\\uC788\\uC73C\\uBA74 true, \\uBE44\\uC5B4\\uC788\\uC9C0 \\uC54A\\uC73C\\uBA74 false \\uBC18\\uD658\\n    \\n  q.size(); //\\uD050\\uC5D0 \\uC800\\uC7A5\\uB418\\uC5B4 \\uC788\\uB294 \\uC6D0\\uC18C\\uC758 \\uAC1C\\uC218\\n  \\n    return 0;\\n}\\n\")), mdx(\"p\", null, \"dque \\uD074\\uB798\\uC2A4 \\uAE30\\uBC18\"), mdx(\"h6\", null, \"\\uC6B0\\uC120\\uC21C\\uC704 \\uD050\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-c++\"\n  }), \"#include <queue>\\nusing namespace std;\\nint main(){\\n  \\n  priority_queue<int> pq; //\\uB0B4\\uB9BC\\uCC28\\uC21C\\uC73C\\uB85C \\uC800\\uC7A5\\n  \\n  // <\\uBCC0\\uC218\\uBA85, \\uCEE8\\uD14C\\uC774\\uB108, \\uBE44\\uAD50\\uD568\\uC218>\\n  priority_queue<int, vector<int>, less<int> > pque;\\n  \\n  pq.push(10);\\n  pq.pop();\\n  \\n  pq.top();\\n  \\n  pq.size();\\n  \\n  pq.empty();\\n  \\n \\n  \\n  return 0;\\n}\\n\")), mdx(\"p\", null, \" vector \\uD074\\uB798\\uC2A4 \\uAE30\\uBC18\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"CPP STL - Queue\",\n  \"date\": \"2020-08-04T00:00:00.000Z\",\n  \"tags\": [\"CPP\"]\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h6>{`큐`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c++\"\n      }}>{`#include <iostream>\n#include <queue>\nusing namespace std;\nint main(){\n    \n    queue<int> q;//int자료형을 저장하는 큐 생성\n    \n    q.push(4); // 맨 뒤에 요소 삽입\n    q.pop(); // 맨 앞의 요소를 반환\n    \n  q.front();//큐의 맨 앞에 있는 요소에 대한 참조를 반환\n  q.back();//큐의 맨 뒤에 있는 요소에 대한 참조를 반환\n  \n  q.empty(); //큐가 비어있으면 true, 비어있지 않으면 false 반환\n    \n  q.size(); //큐에 저장되어 있는 원소의 개수\n  \n    return 0;\n}\n`}</code></pre>\n    <p>{`dque 클래스 기반`}</p>\n    <h6>{`우선순위 큐`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c++\"\n      }}>{`#include <queue>\nusing namespace std;\nint main(){\n  \n  priority_queue<int> pq; //내림차순으로 저장\n  \n  // <변수명, 컨테이너, 비교함수>\n  priority_queue<int, vector<int>, less<int> > pque;\n  \n  pq.push(10);\n  pq.pop();\n  \n  pq.top();\n  \n  pq.size();\n  \n  pq.empty();\n  \n \n  \n  return 0;\n}\n`}</code></pre>\n    <p>{` vector 클래스 기반`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}