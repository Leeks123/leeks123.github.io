{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/파이썬을-이용한-빅데이터-분석-ch-2-실습","result":{"data":{"post":{"__typename":"MdxPost","slug":"/파이썬을-이용한-빅데이터-분석-ch-2-실습","title":"<파이썬을 이용한 빅데이터 분석> ch2 실습","date":"05.08.2020","tags":[{"name":"Python","slug":"python"},{"name":"BigData","slug":"big-data"},{"name":"MachineLearning","slug":"machine-learning"}],"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"<파이썬을 이용한 빅데이터 분석> ch2 실습\",\n  \"date\": \"2020-08-05T00:00:00.000Z\",\n  \"tags\": [\"Python\", \"BigData\", \"MachineLearning\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Scikit learn \\uC81C\\uACF5 Toy Data \\uC0AC\\uC6A9\\uD55C \\uC2E4\\uC2B5\"), mdx(\"h3\", null, \"\\uB370\\uC774\\uD130 \\uC14B\\uACFC \\uC758\\uC0AC\\uACB0\\uC815 \\uD2B8\\uB9AC \\uAE30\\uBC18 \\uBD84\\uB958\\uAE30 \\uAD00\\uB828 \\uD074\\uB798\\uC2A4 \\uBD88\\uB7EC\\uC624\\uAE30\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"from sklearn import datasets\\nfrom sklearn.tree import DecisionTreeClassifier\\n\")), mdx(\"h3\", null, \"\\uB370\\uC774\\uD130\\uC14B \\uBD84\\uB9AC \\uBAA8\\uB4C8 \\uBD88\\uB7EC\\uC624\\uAE30\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"from sklearn.model_selection import train_test_split\\nfrom sklearn.model_selection import StratifiedKFold\\nfrom sklearn.model_selection import cross_val_score\\n\")), mdx(\"h3\", null, \"\\uC131\\uB2A5\\uD3C9\\uAC00 \\uBAA8\\uB4C8 \\uBD88\\uB7EC\\uC624\\uAE30\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"from sklearn.metrics import confusion_matrix\\nfrom sklearn.metrics import accuracy_score\\nfrom sklearn.metrics import classification_report\\nfrom sklearn.metrics import roc_auc_score\\nfrom sklearn.metrics import mean_squared_error\\n\")), mdx(\"h3\", null, \"\\uB370\\uC774\\uD130 \\uC14B \\uAD6C\\uC131\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"data = datasets.load_breast_cancer()\\nX = data.data\\ny = data.target\\n\")), mdx(\"h3\", null, \"Holdout\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)\\n\")), mdx(\"p\", null, \"\\uB370\\uC774\\uD130 \\uC14B\\uC744 8:2\\uC758 \\uBE44\\uC728\\uB85C \\uD6C8\\uB828\\uC14B\\uACFC \\uD14C\\uC2A4\\uD2B8\\uC14B\\uC73C\\uB85C \\uBD84\\uB9AC\\uD55C\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"clf = DecisionTreeClassifier()\\nclf.fit(X_train,y_train)\\nclf\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"DecisionTreeClassifier()\\n\")), mdx(\"p\", null, \"Decision Tree \\uBD84\\uB958 \\uBAA8\\uB378\\uC744 \\uC0DD\\uC131\\uD558\\uC5EC fit\\uD568\\uC218\\uB97C \\uD1B5\\uD574 \\uD6C8\\uB828\\uC2DC\\uD0A8\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"y_pred = clf.predict(X_test)\\n\")), mdx(\"p\", null, \"y_pred \\uBCC0\\uC218\\uC5D0 X_test\\uC758 \\uC608\\uCE21\\uAC12\\uC744 \\uC800\\uC7A5\\uD55C\\uB2E4\"), mdx(\"h4\", null, \"\\uBAA8\\uB378 \\uC131\\uB2A5 \\uD3C9\\uAC00\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"print(\\\"Confusion matrix\\\")\\nprint(confusion_matrix(y_test,y_pred))\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Confusion matrix\\n[[40  2]\\n [ 5 67]]\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"print(\\\"Accuracy\\\")\\nprint(accuracy_score(y_test,y_pred,normalize=True))\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Accuracy\\n0.9385964912280702\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"normalize=True : \\uC62C\\uBC14\\uB974\\uAC8C \\uBD84\\uB958\\uB41C \\uB370\\uC774\\uD130\\uC758 \\uBE44\\uC728 \\uCD9C\\uB825\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"normalize=False : \\uC62C\\uBC14\\uB974\\uAC8C \\uBD84\\uB958\\uB41C \\uB370\\uC774\\uD130 \\uAC74\\uC218 \\uCD9C\\uB825\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"print(\\\"Classification Report\\\")\\nprint(classification_report(y_test,y_pred))\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Classification Report\\n              precision    recall  f1-score   support\\n\\n           0       0.89      0.95      0.92        42\\n           1       0.97      0.93      0.95        72\\n\\n    accuracy                           0.94       114\\n   macro avg       0.93      0.94      0.93       114\\nweighted avg       0.94      0.94      0.94       114\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"print(\\\"AUC\\\")\\nprint(roc_auc_score(y_test,y_pred))\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"AUC\\n0.941468253968254\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"print(\\\"Mean Squared Error\\\")\\nprint(mean_squared_error(y_test,y_pred))\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Mean Squared Error\\n0.06140350877192982\\n\")), mdx(\"h3\", null, \"K fold Cross Validation\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"skf = StratifiedKFold(n_splits=10)\\nskf.get_n_splits(X,y)\\nprint(skf)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"StratifiedKFold(n_splits=10, random_state=None, shuffle=False)\\n\")), mdx(\"p\", null, \"10\\uAC1C\\uC758 \\uD3F4\\uB4DC\\uB85C \\uBD84\\uB9AC\"), mdx(\"h4\", null, \"\\uC131\\uB2A5\\uD3C9\\uAC00\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"clf = DecisionTreeClassifier()\\nscore = cross_val_score(clf,X,y,cv=skf)\\nprint('K fold cross validation score')\\nprint(score)\\nprint('Average Accuracy')\\nprint(score.mean())\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"K fold cross validation score\\n[0.9122807  0.89473684 0.9122807  0.87719298 0.96491228 0.89473684\\n 0.87719298 0.94736842 0.92982456 0.94642857]\\nAverage Accuracy\\n0.9156954887218044\\n\")), mdx(\"h3\", null, \"K fold Cross Validation-shuffle\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"skf_sh = StratifiedKFold(n_splits=10,shuffle=True)\\nskf_sh.get_n_splits(X,y)\\nprint(skf_sh)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"StratifiedKFold(n_splits=10, random_state=None, shuffle=True)\\n\")), mdx(\"h4\", null, \"\\uC131\\uB2A5\\uD3C9\\uAC00\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"clf = DecisionTreeClassifier()\\nscore = cross_val_score(clf,X,y,cv=skf_sh)\\nprint('K fold cross validation score')\\nprint(score)\\nprint('Average Accuracy')\\nprint(score.mean())\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"K fold cross validation score\\n[0.89473684 0.94736842 0.9122807  0.96491228 0.92982456 0.89473684\\n 0.89473684 0.89473684 0.94736842 0.92857143]\\nAverage Accuracy\\n0.9209273182957393\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Scikit learn 제공 Toy Data 사용한 실습 데이터 셋과 의사결정 트리 기반 분류기 관련 클래스 불러오기 데이터셋 분리 모듈 불러오기 성능평가 모듈 불러오기 데이터 셋 구성 Holdout 데이터 셋을 8:…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/파이썬을-이용한-빅데이터-분석-ch-2-실습","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["318001574","3787687951","3787687951"]}